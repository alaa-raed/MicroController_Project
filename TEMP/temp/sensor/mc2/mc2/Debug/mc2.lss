
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000272  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c51  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056d  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c7  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000246  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000261d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7a:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
  82:	fc 01       	movw	r30, r24
  84:	47 b1       	in	r20, 0x07	; 7
  86:	90 81       	ld	r25, Z
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	98 9f       	mul	r25, r24
  8c:	90 01       	movw	r18, r0
  8e:	11 24       	eor	r1, r1
  90:	94 2f       	mov	r25, r20
  92:	9f 73       	andi	r25, 0x3F	; 63
  94:	29 2b       	or	r18, r25
  96:	27 b9       	out	0x07, r18	; 7
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	90 7e       	andi	r25, 0xE0	; 224
  9c:	97 b9       	out	0x07, r25	; 7
  9e:	96 b1       	in	r25, 0x06	; 6
  a0:	81 81       	ldd	r24, Z+1	; 0x01
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	87 70       	andi	r24, 0x07	; 7
  a6:	89 2b       	or	r24, r25
  a8:	86 b9       	out	0x06, r24	; 6
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	08 95       	ret

000000b8 <main>:
#include "gpio.h"
#include <util/delay.h>
#include "uart.h"
#define CONST_RESISTANCE 14000
int main()
{	
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	29 97       	sbiw	r28, 0x09	; 9
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
int vReal,vImg;
/* UART config */
UART_ConfigType UART_Config = {CHARACTER_SIZE_8,Even,UART_STOP_1BIT_SELECT,9600};
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
UART_init(&UART_Config);
  de:	ce 01       	movw	r24, r28
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_init>
ADC_ConfigType currentConfig;
currentConfig.prescaler=PRESCALER_128;
  e6:	87 e0       	ldi	r24, 0x07	; 7
  e8:	89 87       	std	Y+9, r24	; 0x09
currentConfig.reference_mode=AVCC_MODE;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	88 87       	std	Y+8, r24	; 0x08
ADC_init(&currentConfig);
  ee:	ce 01       	movw	r24, r28
  f0:	08 96       	adiw	r24, 0x08	; 8
  f2:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
DDRA&=~(1<<0);
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	8a bb       	out	0x1a, r24	; 26
DDRC|=(1<<0);
  fc:	84 b3       	in	r24, 0x14	; 20
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	84 bb       	out	0x14, r24	; 20
while(1)
{
	if(PINA&(1<<0)==1)
 102:	c8 9b       	sbis	0x19, 0	; 25
 104:	0d c0       	rjmp	.+26     	; 0x120 <main+0x68>
	{
		PORTC|=(1<<0);
 106:	85 b3       	in	r24, 0x15	; 21
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	85 bb       	out	0x15, r24	; 21
		vReal=3;
		vImg=3;
		//_delay_ms(25);
		UART_sendByte(vReal);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
		UART_sendByte(vImg);
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
		UART_sendByte(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
 11e:	f1 cf       	rjmp	.-30     	; 0x102 <main+0x4a>
		
	}
	else{
		PORTC&=~(1<<0);
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	85 bb       	out	0x15, r24	; 21
		vReal=3;
		vImg=3;
		//_delay_ms(25);
		UART_sendByte(vReal);
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
		UART_sendByte(vImg);
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
		UART_sendByte(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 11 01 	call	0x222	; 0x222 <UART_sendByte>
 138:	e4 cf       	rjmp	.-56     	; 0x102 <main+0x4a>

0000013a <UART_init>:
 13a:	fc 01       	movw	r30, r24
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	88 69       	ori	r24, 0x98	; 152
 144:	8a b9       	out	0x0a, r24	; 10
 146:	80 b5       	in	r24, 0x20	; 32
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	80 bd       	out	0x20, r24	; 32
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	21 f4       	brne	.+8      	; 0x15a <UART_init+0x20>
 152:	80 b5       	in	r24, 0x20	; 32
 154:	80 62       	ori	r24, 0x20	; 32
 156:	80 bd       	out	0x20, r24	; 32
 158:	05 c0       	rjmp	.+10     	; 0x164 <UART_init+0x2a>
 15a:	81 11       	cpse	r24, r1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <UART_init+0x2a>
 15e:	80 b5       	in	r24, 0x20	; 32
 160:	80 63       	ori	r24, 0x30	; 48
 162:	80 bd       	out	0x20, r24	; 32
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	19 f4       	brne	.+6      	; 0x170 <UART_init+0x36>
 16a:	80 b5       	in	r24, 0x20	; 32
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 bd       	out	0x20, r24	; 32
 170:	80 81       	ld	r24, Z
 172:	85 30       	cpi	r24, 0x05	; 5
 174:	51 f4       	brne	.+20     	; 0x18a <UART_init+0x50>
 176:	80 b5       	in	r24, 0x20	; 32
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	80 bd       	out	0x20, r24	; 32
 17c:	80 b5       	in	r24, 0x20	; 32
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	80 bd       	out	0x20, r24	; 32
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	8a b9       	out	0x0a, r24	; 10
 188:	2f c0       	rjmp	.+94     	; 0x1e8 <UART_init+0xae>
 18a:	86 30       	cpi	r24, 0x06	; 6
 18c:	51 f4       	brne	.+20     	; 0x1a2 <UART_init+0x68>
 18e:	80 b5       	in	r24, 0x20	; 32
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 bd       	out	0x20, r24	; 32
 194:	80 b5       	in	r24, 0x20	; 32
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	80 bd       	out	0x20, r24	; 32
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	8b 7f       	andi	r24, 0xFB	; 251
 19e:	8a b9       	out	0x0a, r24	; 10
 1a0:	23 c0       	rjmp	.+70     	; 0x1e8 <UART_init+0xae>
 1a2:	87 30       	cpi	r24, 0x07	; 7
 1a4:	51 f4       	brne	.+20     	; 0x1ba <UART_init+0x80>
 1a6:	80 b5       	in	r24, 0x20	; 32
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	80 bd       	out	0x20, r24	; 32
 1ac:	80 b5       	in	r24, 0x20	; 32
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	80 bd       	out	0x20, r24	; 32
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <UART_init+0xae>
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <UART_init+0x98>
 1be:	80 b5       	in	r24, 0x20	; 32
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 bd       	out	0x20, r24	; 32
 1c4:	80 b5       	in	r24, 0x20	; 32
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	80 bd       	out	0x20, r24	; 32
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	8a b9       	out	0x0a, r24	; 10
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <UART_init+0xae>
 1d2:	89 30       	cpi	r24, 0x09	; 9
 1d4:	49 f4       	brne	.+18     	; 0x1e8 <UART_init+0xae>
 1d6:	80 b5       	in	r24, 0x20	; 32
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 bd       	out	0x20, r24	; 32
 1dc:	80 b5       	in	r24, 0x20	; 32
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	80 bd       	out	0x20, r24	; 32
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	83 81       	ldd	r24, Z+3	; 0x03
 1ea:	94 81       	ldd	r25, Z+4	; 0x04
 1ec:	a5 81       	ldd	r26, Z+5	; 0x05
 1ee:	b6 81       	ldd	r27, Z+6	; 0x06
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	aa 1f       	adc	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	aa 1f       	adc	r26, r26
 1fe:	bb 1f       	adc	r27, r27
 200:	9c 01       	movw	r18, r24
 202:	ad 01       	movw	r20, r26
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	44 1f       	adc	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	74 e2       	ldi	r23, 0x24	; 36
 210:	84 ef       	ldi	r24, 0xF4	; 244
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 15 01 	call	0x22a	; 0x22a <__udivmodsi4>
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	31 09       	sbc	r19, r1
 21c:	30 bd       	out	0x20, r19	; 32
 21e:	29 b9       	out	0x09, r18	; 9
 220:	08 95       	ret

00000222 <UART_sendByte>:
 222:	5d 9b       	sbis	0x0b, 5	; 11
 224:	fe cf       	rjmp	.-4      	; 0x222 <UART_sendByte>
 226:	8c b9       	out	0x0c, r24	; 12
 228:	08 95       	ret

0000022a <__udivmodsi4>:
 22a:	a1 e2       	ldi	r26, 0x21	; 33
 22c:	1a 2e       	mov	r1, r26
 22e:	aa 1b       	sub	r26, r26
 230:	bb 1b       	sub	r27, r27
 232:	fd 01       	movw	r30, r26
 234:	0d c0       	rjmp	.+26     	; 0x250 <__udivmodsi4_ep>

00000236 <__udivmodsi4_loop>:
 236:	aa 1f       	adc	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	ee 1f       	adc	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	a2 17       	cp	r26, r18
 240:	b3 07       	cpc	r27, r19
 242:	e4 07       	cpc	r30, r20
 244:	f5 07       	cpc	r31, r21
 246:	20 f0       	brcs	.+8      	; 0x250 <__udivmodsi4_ep>
 248:	a2 1b       	sub	r26, r18
 24a:	b3 0b       	sbc	r27, r19
 24c:	e4 0b       	sbc	r30, r20
 24e:	f5 0b       	sbc	r31, r21

00000250 <__udivmodsi4_ep>:
 250:	66 1f       	adc	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	88 1f       	adc	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	1a 94       	dec	r1
 25a:	69 f7       	brne	.-38     	; 0x236 <__udivmodsi4_loop>
 25c:	60 95       	com	r22
 25e:	70 95       	com	r23
 260:	80 95       	com	r24
 262:	90 95       	com	r25
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	bd 01       	movw	r22, r26
 26a:	cf 01       	movw	r24, r30
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
