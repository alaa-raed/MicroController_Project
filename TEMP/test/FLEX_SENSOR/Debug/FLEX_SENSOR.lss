
FLEX_SENSOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002e92  00002f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002454  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011b8  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  000067a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  0000697b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000898a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000aafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000af5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b80b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 db 14 	call	0x29b6	; 0x29b6 <main>
      7a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	ed 58       	subi	r30, 0x8D	; 141
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <ADC_init>:
 *******************************************************************************/
#include<avr/io.h>
#include "common_macros.h"
#include "lcd.h"
#include "adc.h"
void ADC_init(const ADC_ConfigType * config_Ptr){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <ADC_init+0x6>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX&0x3F)|((config_Ptr->reference_mode)<<6); // Working with AVCC
     cd4:	a7 e2       	ldi	r26, 0x27	; 39
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e2       	ldi	r30, 0x27	; 39
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	28 2f       	mov	r18, r24
     ce0:	2f 73       	andi	r18, 0x3F	; 63
     ce2:	e9 81       	ldd	r30, Y+1	; 0x01
     ce4:	fa 81       	ldd	r31, Y+2	; 0x02
     ce6:	80 81       	ld	r24, Z
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	00 24       	eor	r0, r0
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	07 94       	ror	r0
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	07 94       	ror	r0
     cfa:	98 2f       	mov	r25, r24
     cfc:	80 2d       	mov	r24, r0
     cfe:	82 2b       	or	r24, r18
     d00:	8c 93       	st	X, r24
	ADMUX &= 0xE0; // Clearing the first five bits in ADMUX
     d02:	a7 e2       	ldi	r26, 0x27	; 39
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e2       	ldi	r30, 0x27	; 39
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 7e       	andi	r24, 0xE0	; 224
     d0e:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0xF8)|(config_Ptr->prescaler & 0x07); //CLOCK 128
     d10:	a6 e2       	ldi	r26, 0x26	; 38
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e6 e2       	ldi	r30, 0x26	; 38
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	98 2f       	mov	r25, r24
     d1c:	98 7f       	andi	r25, 0xF8	; 248
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	81 81       	ldd	r24, Z+1	; 0x01
     d24:	87 70       	andi	r24, 0x07	; 7
     d26:	89 2b       	or	r24, r25
     d28:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADC_INTERRUPT_ENABLE_BIT); //Disable interrupt
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	87 7f       	andi	r24, 0xF7	; 247
     d36:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADC_MODULE_ENABLE_BIT); //Enable ADC
     d38:	a6 e2       	ldi	r26, 0x26	; 38
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e6 e2       	ldi	r30, 0x26	; 38
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	8c 93       	st	X, r24
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 channel_number){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX&0xE0)|(channel_number&0x07); //Choose pin
     d5c:	a7 e2       	ldi	r26, 0x27	; 39
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e7 e2       	ldi	r30, 0x27	; 39
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	98 2f       	mov	r25, r24
     d68:	90 7e       	andi	r25, 0xE0	; 224
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	87 70       	andi	r24, 0x07	; 7
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,START_CONVERSION_ENABLE_BIT); //Start conversion
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADC_INTERRUPT_FLAG_BIT)); // Polling check flag
     d80:	e6 e2       	ldi	r30, 0x26	; 38
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	80 71       	andi	r24, 0x10	; 16
     d8c:	90 70       	andi	r25, 0x00	; 0
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	b9 f3       	breq	.-18     	; 0xd80 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADC_INTERRUPT_FLAG_BIT); // Clear flag
     d92:	a6 e2       	ldi	r26, 0x26	; 38
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e6 e2       	ldi	r30, 0x26	; 38
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 61       	ori	r24, 0x10	; 16
     d9e:	8c 93       	st	X, r24
	return ADC;
     da0:	e4 e2       	ldi	r30, 0x24	; 36
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
}
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <flex_sensor_start>:
 *******************************************************************************/
#include "adc.h"
#include "common_macros.h"
#include "flex_sensor.h"
void flex_sensor_start(uint8 pin_no,flex_parameters  * config_Ptr)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	29 97       	sbiw	r28, 0x09	; 9
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	8f 83       	std	Y+7, r24	; 0x07
     dc6:	79 87       	std	Y+9, r23	; 0x09
     dc8:	68 87       	std	Y+8, r22	; 0x08
	uint16 outVolt,res_value;
	uint16 adcOut=ADC_readChannel(pin_no);
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	0e 94 a8 06 	call	0xd50	; 0xd50 <ADC_readChannel>
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	outVolt = (adcOut*5)/1023;
     dd4:	29 81       	ldd	r18, Y+1	; 0x01
     dd6:	3a 81       	ldd	r19, Y+2	; 0x02
     dd8:	c9 01       	movw	r24, r18
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	2f ef       	ldi	r18, 0xFF	; 255
     de8:	33 e0       	ldi	r19, 0x03	; 3
     dea:	b9 01       	movw	r22, r18
     dec:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__udivmodhi4>
     df0:	cb 01       	movw	r24, r22
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
	res_value =51000* (5 / outVolt - 1.0);
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2d 81       	ldd	r18, Y+5	; 0x05
     dfc:	3e 81       	ldd	r19, Y+6	; 0x06
     dfe:	b9 01       	movw	r22, r18
     e00:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__udivmodhi4>
     e04:	cb 01       	movw	r24, r22
     e06:	cc 01       	movw	r24, r24
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	38 e3       	ldi	r19, 0x38	; 56
     e34:	47 e4       	ldi	r20, 0x47	; 71
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
	config_Ptr->movDirect=FORWARD;
     e50:	e8 85       	ldd	r30, Y+8	; 0x08
     e52:	f9 85       	ldd	r31, Y+9	; 0x09
     e54:	10 86       	std	Z+8, r1	; 0x08
	config_Ptr->out_voltage=outVolt;
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	cc 01       	movw	r24, r24
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 85       	ldd	r30, Y+8	; 0x08
     e62:	f9 85       	ldd	r31, Y+9	; 0x09
     e64:	84 83       	std	Z+4, r24	; 0x04
     e66:	95 83       	std	Z+5, r25	; 0x05
     e68:	a6 83       	std	Z+6, r26	; 0x06
     e6a:	b7 83       	std	Z+7, r27	; 0x07
	config_Ptr->res=res_value;
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	cc 01       	movw	r24, r24
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	e8 85       	ldd	r30, Y+8	; 0x08
     e84:	f9 85       	ldd	r31, Y+9	; 0x09
     e86:	80 83       	st	Z, r24
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	a2 83       	std	Z+2, r26	; 0x02
     e8c:	b3 83       	std	Z+3, r27	; 0x03
}
     e8e:	29 96       	adiw	r28, 0x09	; 9
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <GPIO_setupPinDirection+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <GPIO_setupPinDirection+0x8>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	6a 83       	std	Y+2, r22	; 0x02
     eb2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	88 30       	cpi	r24, 0x08	; 8
     eb8:	08 f0       	brcs	.+2      	; 0xebc <GPIO_setupPinDirection+0x1c>
     eba:	d5 c0       	rjmp	.+426    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <GPIO_setupPinDirection+0x24>
     ec2:	d1 c0       	rjmp	.+418    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3d 83       	std	Y+5, r19	; 0x05
     ecc:	2c 83       	std	Y+4, r18	; 0x04
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_setupPinDirection+0x3a>
     ed8:	43 c0       	rjmp	.+134    	; 0xf60 <GPIO_setupPinDirection+0xc0>
     eda:	2c 81       	ldd	r18, Y+4	; 0x04
     edc:	3d 81       	ldd	r19, Y+5	; 0x05
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <GPIO_setupPinDirection+0x4e>
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	9d 81       	ldd	r25, Y+5	; 0x05
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	71 f0       	breq	.+28     	; 0xf08 <GPIO_setupPinDirection+0x68>
     eec:	bc c0       	rjmp	.+376    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
     eee:	2c 81       	ldd	r18, Y+4	; 0x04
     ef0:	3d 81       	ldd	r19, Y+5	; 0x05
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <GPIO_setupPinDirection+0x5a>
     ef8:	5f c0       	rjmp	.+190    	; 0xfb8 <GPIO_setupPinDirection+0x118>
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	9d 81       	ldd	r25, Y+5	; 0x05
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <GPIO_setupPinDirection+0x66>
     f04:	85 c0       	rjmp	.+266    	; 0x1010 <GPIO_setupPinDirection+0x170>
     f06:	af c0       	rjmp	.+350    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f0e:	aa e3       	ldi	r26, 0x3A	; 58
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ea e3       	ldi	r30, 0x3A	; 58
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <GPIO_setupPinDirection+0x8c>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <GPIO_setupPinDirection+0x88>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	98 c0       	rjmp	.+304    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f36:	aa e3       	ldi	r26, 0x3A	; 58
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e3       	ldi	r30, 0x3A	; 58
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <GPIO_setupPinDirection+0xb4>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <GPIO_setupPinDirection+0xb0>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	83 c0       	rjmp	.+262    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a1 f4       	brne	.+40     	; 0xf8e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f66:	a7 e3       	ldi	r26, 0x37	; 55
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e3       	ldi	r30, 0x37	; 55
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_setupPinDirection+0xe4>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_setupPinDirection+0xe0>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	6c c0       	rjmp	.+216    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f8e:	a7 e3       	ldi	r26, 0x37	; 55
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e7 e3       	ldi	r30, 0x37	; 55
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_setupPinDirection+0x10c>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_setupPinDirection+0x108>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	57 c0       	rjmp	.+174    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <GPIO_setupPinDirection+0x13c>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <GPIO_setupPinDirection+0x138>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	40 c0       	rjmp	.+128    	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fe6:	a4 e3       	ldi	r26, 0x34	; 52
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e4 e3       	ldi	r30, 0x34	; 52
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_setupPinDirection+0x164>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_setupPinDirection+0x160>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	2b c0       	rjmp	.+86     	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1016:	a1 e3       	ldi	r26, 0x31	; 49
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e3       	ldi	r30, 0x31	; 49
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <GPIO_setupPinDirection+0x194>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <GPIO_setupPinDirection+0x190>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_setupPinDirection+0x1bc>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_setupPinDirection+0x1b8>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <GPIO_writePin+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <GPIO_writePin+0x8>
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	6a 83       	std	Y+2, r22	; 0x02
    1088:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	08 f0       	brcs	.+2      	; 0x1092 <GPIO_writePin+0x1c>
    1090:	d5 c0       	rjmp	.+426    	; 0x123c <GPIO_writePin+0x1c6>
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 30       	cpi	r24, 0x08	; 8
    1096:	08 f0       	brcs	.+2      	; 0x109a <GPIO_writePin+0x24>
    1098:	d1 c0       	rjmp	.+418    	; 0x123c <GPIO_writePin+0x1c6>

	}
	else{
		switch(port_num){
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3d 83       	std	Y+5, r19	; 0x05
    10a2:	2c 83       	std	Y+4, r18	; 0x04
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <GPIO_writePin+0x3a>
    10ae:	43 c0       	rjmp	.+134    	; 0x1136 <GPIO_writePin+0xc0>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <GPIO_writePin+0x4e>
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	71 f0       	breq	.+28     	; 0x10de <GPIO_writePin+0x68>
    10c2:	bc c0       	rjmp	.+376    	; 0x123c <GPIO_writePin+0x1c6>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <GPIO_writePin+0x5a>
    10ce:	5f c0       	rjmp	.+190    	; 0x118e <GPIO_writePin+0x118>
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <GPIO_writePin+0x66>
    10da:	85 c0       	rjmp	.+266    	; 0x11e6 <GPIO_writePin+0x170>
    10dc:	af c0       	rjmp	.+350    	; 0x123c <GPIO_writePin+0x1c6>
		case 0:

			if(value==LOGIC_HIGH){
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_writePin+0x8c>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_writePin+0x88>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	98 c0       	rjmp	.+304    	; 0x123c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    110c:	ab e3       	ldi	r26, 0x3B	; 59
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e3       	ldi	r30, 0x3B	; 59
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_writePin+0xb4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_writePin+0xb0>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	83 c0       	rjmp	.+262    	; 0x123c <GPIO_writePin+0x1c6>
			}
			break;

		case 1:
			if(value==LOGIC_HIGH){
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    113c:	a8 e3       	ldi	r26, 0x38	; 56
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_writePin+0xe4>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_writePin+0xe0>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	6c c0       	rjmp	.+216    	; 0x123c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1164:	a8 e3       	ldi	r26, 0x38	; 56
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_writePin+0x10c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_writePin+0x108>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	57 c0       	rjmp	.+174    	; 0x123c <GPIO_writePin+0x1c6>
			}
			break;

		case 2:
			if(value==LOGIC_HIGH){
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a1 f4       	brne	.+40     	; 0x11bc <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1194:	a5 e3       	ldi	r26, 0x35	; 53
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e3       	ldi	r30, 0x35	; 53
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_writePin+0x13c>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_writePin+0x138>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	40 c0       	rjmp	.+128    	; 0x123c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    11bc:	a5 e3       	ldi	r26, 0x35	; 53
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e3       	ldi	r30, 0x35	; 53
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_writePin+0x164>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_writePin+0x160>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	2b c0       	rjmp	.+86     	; 0x123c <GPIO_writePin+0x1c6>
			}
			break;

		case 3:
			if(value==LOGIC_HIGH){
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    11ec:	a2 e3       	ldi	r26, 0x32	; 50
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e2 e3       	ldi	r30, 0x32	; 50
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_writePin+0x194>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_writePin+0x190>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	14 c0       	rjmp	.+40     	; 0x123c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1214:	a2 e3       	ldi	r26, 0x32	; 50
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e2 e3       	ldi	r30, 0x32	; 50
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_writePin+0x1bc>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_writePin+0x1b8>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_readPin+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_readPin+0x8>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp=0;
    125e:	19 82       	std	Y+1, r1	; 0x01
	if((port_num>=NUM_OF_PORTS) ||(pin_num>=NUM_OF_PINS_PER_PORT)){
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	08 f0       	brcs	.+2      	; 0x1268 <GPIO_readPin+0x1c>
    1266:	84 c0       	rjmp	.+264    	; 0x1370 <GPIO_readPin+0x124>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <GPIO_readPin+0x24>
    126e:	80 c0       	rjmp	.+256    	; 0x1370 <GPIO_readPin+0x124>

	}
	else{
		switch(port_num){
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3d 83       	std	Y+5, r19	; 0x05
    1278:	2c 83       	std	Y+4, r18	; 0x04
    127a:	4c 81       	ldd	r20, Y+4	; 0x04
    127c:	5d 81       	ldd	r21, Y+5	; 0x05
    127e:	41 30       	cpi	r20, 0x01	; 1
    1280:	51 05       	cpc	r21, r1
    1282:	79 f1       	breq	.+94     	; 0x12e2 <GPIO_readPin+0x96>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	91 05       	cpc	r25, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <GPIO_readPin+0x4e>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	21 15       	cp	r18, r1
    1294:	31 05       	cpc	r19, r1
    1296:	69 f0       	breq	.+26     	; 0x12b2 <GPIO_readPin+0x66>
    1298:	6b c0       	rjmp	.+214    	; 0x1370 <GPIO_readPin+0x124>
    129a:	4c 81       	ldd	r20, Y+4	; 0x04
    129c:	5d 81       	ldd	r21, Y+5	; 0x05
    129e:	42 30       	cpi	r20, 0x02	; 2
    12a0:	51 05       	cpc	r21, r1
    12a2:	b9 f1       	breq	.+110    	; 0x1312 <GPIO_readPin+0xc6>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <GPIO_readPin+0x64>
    12ae:	49 c0       	rjmp	.+146    	; 0x1342 <GPIO_readPin+0xf6>
    12b0:	5f c0       	rjmp	.+190    	; 0x1370 <GPIO_readPin+0x124>
		case 0:
			if(BIT_IS_SET(PINA,pin_num)){
    12b2:	e9 e3       	ldi	r30, 0x39	; 57
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_readPin+0x7e>
    12c6:	55 95       	asr	r21
    12c8:	47 95       	ror	r20
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_readPin+0x7a>
    12ce:	ca 01       	movw	r24, r20
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	90 70       	andi	r25, 0x00	; 0
    12d4:	88 23       	and	r24, r24
    12d6:	19 f0       	breq	.+6      	; 0x12de <GPIO_readPin+0x92>
				temp = LOGIC_HIGH;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	49 c0       	rjmp	.+146    	; 0x1370 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	47 c0       	rjmp	.+142    	; 0x1370 <GPIO_readPin+0x124>
			}
			break;

		case 1:
			if(BIT_IS_SET(PINB,pin_num)){
    12e2:	e6 e3       	ldi	r30, 0x36	; 54
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_readPin+0xae>
    12f6:	55 95       	asr	r21
    12f8:	47 95       	ror	r20
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_readPin+0xaa>
    12fe:	ca 01       	movw	r24, r20
    1300:	81 70       	andi	r24, 0x01	; 1
    1302:	90 70       	andi	r25, 0x00	; 0
    1304:	88 23       	and	r24, r24
    1306:	19 f0       	breq	.+6      	; 0x130e <GPIO_readPin+0xc2>
				temp = LOGIC_HIGH;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	31 c0       	rjmp	.+98     	; 0x1370 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    130e:	19 82       	std	Y+1, r1	; 0x01
    1310:	2f c0       	rjmp	.+94     	; 0x1370 <GPIO_readPin+0x124>
			}

			break;

		case 2:
			if(BIT_IS_SET(PINC,pin_num)){
    1312:	e3 e3       	ldi	r30, 0x33	; 51
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a9 01       	movw	r20, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_readPin+0xde>
    1326:	55 95       	asr	r21
    1328:	47 95       	ror	r20
    132a:	8a 95       	dec	r24
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_readPin+0xda>
    132e:	ca 01       	movw	r24, r20
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	88 23       	and	r24, r24
    1336:	19 f0       	breq	.+6      	; 0x133e <GPIO_readPin+0xf2>
				temp = LOGIC_HIGH;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	19 c0       	rjmp	.+50     	; 0x1370 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	17 c0       	rjmp	.+46     	; 0x1370 <GPIO_readPin+0x124>
			}
			break;

		case 3:
			if(BIT_IS_SET(PIND,pin_num)){
    1342:	e0 e3       	ldi	r30, 0x30	; 48
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a9 01       	movw	r20, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_readPin+0x10e>
    1356:	55 95       	asr	r21
    1358:	47 95       	ror	r20
    135a:	8a 95       	dec	r24
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <GPIO_readPin+0x10a>
    135e:	ca 01       	movw	r24, r20
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	88 23       	and	r24, r24
    1366:	19 f0       	breq	.+6      	; 0x136e <GPIO_readPin+0x122>
				temp = LOGIC_HIGH;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <GPIO_readPin+0x124>
			}
			else{
				temp = LOGIC_LOW;
    136e:	19 82       	std	Y+1, r1	; 0x01
			}

			break;
		}
	}
	return temp;
    1370:	89 81       	ldd	r24, Y+1	; 0x01

}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <GPIO_setupPortDirection+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <GPIO_setupPortDirection+0x8>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	90 f5       	brcc	.+100    	; 0x13fc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3c 83       	std	Y+4, r19	; 0x04
    13a0:	2b 83       	std	Y+3, r18	; 0x03
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	d1 f0       	breq	.+52     	; 0x13e0 <GPIO_setupPortDirection+0x5e>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <GPIO_setupPortDirection+0x3e>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <GPIO_setupPortDirection+0x54>
    13be:	1e c0       	rjmp	.+60     	; 0x13fc <GPIO_setupPortDirection+0x7a>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	81 f0       	breq	.+32     	; 0x13ea <GPIO_setupPortDirection+0x68>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <GPIO_setupPortDirection+0x72>
    13d4:	13 c0       	rjmp	.+38     	; 0x13fc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
    13de:	0e c0       	rjmp	.+28     	; 0x13fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13e0:	e7 e3       	ldi	r30, 0x37	; 55
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13f4:	e1 e3       	ldi	r30, 0x31	; 49
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <GPIO_writePort+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <GPIO_writePort+0x8>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	90 f5       	brcc	.+100    	; 0x1484 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3c 83       	std	Y+4, r19	; 0x04
    1428:	2b 83       	std	Y+3, r18	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	d1 f0       	breq	.+52     	; 0x1468 <GPIO_writePort+0x5e>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	2c f4       	brge	.+10     	; 0x1448 <GPIO_writePort+0x3e>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 f0       	breq	.+24     	; 0x145e <GPIO_writePort+0x54>
    1446:	1e c0       	rjmp	.+60     	; 0x1484 <GPIO_writePort+0x7a>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <GPIO_writePort+0x68>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <GPIO_writePort+0x72>
    145c:	13 c0       	rjmp	.+38     	; 0x1484 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    147c:	e2 e3       	ldi	r30, 0x32	; 50
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
			break;
		}

	}
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <GPIO_readPort>:
	 * Description :
	 * Read and return the value of the required port.
	 * If the input port number is not correct, The function will return ZERO value.
	 */
	uint8 GPIO_readPort(uint8 port_num)
	{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <GPIO_readPort+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_readPort+0x8>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 temp=0;
    14a0:	19 82       	std	Y+1, r1	; 0x01

		if(port_num >= NUM_OF_PORTS)
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	90 f5       	brcc	.+100    	; 0x150c <GPIO_readPort+0x7a>
			/* Do Nothing */
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3c 83       	std	Y+4, r19	; 0x04
    14b0:	2b 83       	std	Y+3, r18	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	d1 f0       	breq	.+52     	; 0x14f0 <GPIO_readPort+0x5e>
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <GPIO_readPort+0x3e>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <GPIO_readPort+0x54>
    14ce:	1e c0       	rjmp	.+60     	; 0x150c <GPIO_readPort+0x7a>
    14d0:	2b 81       	ldd	r18, Y+3	; 0x03
    14d2:	3c 81       	ldd	r19, Y+4	; 0x04
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <GPIO_readPort+0x68>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <GPIO_readPort+0x72>
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <GPIO_readPort+0x7a>
			{
			case 0:
				temp=PINA;
    14e6:	e9 e3       	ldi	r30, 0x39	; 57
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <GPIO_readPort+0x7a>

				break;
			case PORTB_ID:
				temp=PINB;
    14f0:	e6 e3       	ldi	r30, 0x36	; 54
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <GPIO_readPort+0x7a>
				break;
			case PORTC_ID:
				temp=PINC;
    14fa:	e3 e3       	ldi	r30, 0x33	; 51
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	04 c0       	rjmp	.+8      	; 0x150c <GPIO_readPort+0x7a>
				break;
			case PORTD_ID:
				temp=PIND;
    1504:	e0 e3       	ldi	r30, 0x30	; 48
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
		return temp;
    150c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	2e 97       	sbiw	r28, 0x0e	; 14
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	62 e0       	ldi	r22, 0x02	; 2
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 ea       	ldi	r26, 0xA0	; 160
    154a:	b1 e4       	ldi	r27, 0x41	; 65
    154c:	8b 87       	std	Y+11, r24	; 0x0b
    154e:	9c 87       	std	Y+12, r25	; 0x0c
    1550:	ad 87       	std	Y+13, r26	; 0x0d
    1552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	6b 85       	ldd	r22, Y+11	; 0x0b
    1556:	7c 85       	ldd	r23, Y+12	; 0x0c
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a e7       	ldi	r20, 0x7A	; 122
    1562:	55 e4       	ldi	r21, 0x45	; 69
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8f 83       	std	Y+7, r24	; 0x07
    156e:	98 87       	std	Y+8, r25	; 0x08
    1570:	a9 87       	std	Y+9, r26	; 0x09
    1572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	2c f4       	brge	.+10     	; 0x1596 <LCD_init+0x7a>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	4c f5       	brge	.+82     	; 0x1600 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <LCD_init+0xda>
    15d8:	80 e9       	ldi	r24, 0x90	; 144
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <LCD_init+0xc8>
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <LCD_init+0xbc>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_init+0x104>
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT_MODE);

#elif(LCD_MODE==4)
	/* Configure the data pins as output pins */
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB7_ID,PIN_OUTPUT);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	66 e0       	ldi	r22, 0x06	; 6
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB6_ID,PIN_OUTPUT);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB5_ID,PIN_OUTPUT);
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	64 e0       	ldi	r22, 0x04	; 4
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PATH_REG,LCD_DB4_ID,PIN_OUTPUT);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 50 07 	call	0xea0	; 0xea0 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1650:	83 e3       	ldi	r24, 0x33	; 51
    1652:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2 );
    1656:	82 e3       	ldi	r24, 0x32	; 50
    1658:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_MODE);
    165c:	88 e2       	ldi	r24, 0x28	; 40
    165e:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
#endif

	 /* cursor off */
	LCD_sendCommand( LCD_CURSOR_OFF );
    1662:	8c e0       	ldi	r24, 0x0C	; 12
    1664:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_DISPLAY );
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
}
    166e:	2e 96       	adiw	r28, 0x0e	; 14
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(unsigned char command){
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	c3 56       	subi	r28, 0x63	; 99
    168e:	d0 40       	sbci	r29, 0x00	; 0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	fe 01       	movw	r30, r28
    169c:	ed 59       	subi	r30, 0x9D	; 157
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 83       	st	Z, r24
	 /* Instruction Mode RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    16ac:	fe 01       	movw	r30, r28
    16ae:	e1 5a       	subi	r30, 0xA1	; 161
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e8       	ldi	r26, 0x80	; 128
    16b8:	bf e3       	ldi	r27, 0x3F	; 63
    16ba:	80 83       	st	Z, r24
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	a2 83       	std	Z+2, r26	; 0x02
    16c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	8e 01       	movw	r16, r28
    16c4:	05 5a       	subi	r16, 0xA5	; 165
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	e1 5a       	subi	r30, 0xA1	; 161
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	4a e7       	ldi	r20, 0x7A	; 122
    16dc:	55 e4       	ldi	r21, 0x45	; 69
    16de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	f8 01       	movw	r30, r16
    16e8:	80 83       	st	Z, r24
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	a2 83       	std	Z+2, r26	; 0x02
    16ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f0:	fe 01       	movw	r30, r28
    16f2:	e5 5a       	subi	r30, 0xA5	; 165
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	44 f4       	brge	.+16     	; 0x171e <LCD_sendCommand+0x9e>
		__ticks = 1;
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
    171c:	64 c0       	rjmp	.+200    	; 0x17e6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    171e:	fe 01       	movw	r30, r28
    1720:	e5 5a       	subi	r30, 0xA5	; 165
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	0c f0       	brlt	.+2      	; 0x173e <LCD_sendCommand+0xbe>
    173c:	43 c0       	rjmp	.+134    	; 0x17c4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	fe 01       	movw	r30, r28
    1740:	e1 5a       	subi	r30, 0xA1	; 161
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8e 01       	movw	r16, r28
    175e:	07 5a       	subi	r16, 0xA7	; 167
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	f8 01       	movw	r30, r16
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
    1774:	1f c0       	rjmp	.+62     	; 0x17b4 <LCD_sendCommand+0x134>
    1776:	fe 01       	movw	r30, r28
    1778:	e9 5a       	subi	r30, 0xA9	; 169
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 e9       	ldi	r24, 0x90	; 144
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
    1784:	fe 01       	movw	r30, r28
    1786:	e9 5a       	subi	r30, 0xA9	; 169
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_sendCommand+0x10e>
    1792:	fe 01       	movw	r30, r28
    1794:	e9 5a       	subi	r30, 0xA9	; 169
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179c:	de 01       	movw	r26, r28
    179e:	a7 5a       	subi	r26, 0xA7	; 167
    17a0:	bf 4f       	sbci	r27, 0xFF	; 255
    17a2:	fe 01       	movw	r30, r28
    17a4:	e7 5a       	subi	r30, 0xA7	; 167
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	11 96       	adiw	r26, 0x01	; 1
    17b0:	9c 93       	st	X, r25
    17b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	fe 01       	movw	r30, r28
    17b6:	e7 5a       	subi	r30, 0xA7	; 167
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	d1 f6       	brne	.-76     	; 0x1776 <LCD_sendCommand+0xf6>
    17c2:	27 c0       	rjmp	.+78     	; 0x1812 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	8e 01       	movw	r16, r28
    17c6:	07 5a       	subi	r16, 0xA7	; 167
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	e5 5a       	subi	r30, 0xA5	; 165
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	f8 01       	movw	r30, r16
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
    17e6:	de 01       	movw	r26, r28
    17e8:	ab 5a       	subi	r26, 0xAB	; 171
    17ea:	bf 4f       	sbci	r27, 0xFF	; 255
    17ec:	fe 01       	movw	r30, r28
    17ee:	e7 5a       	subi	r30, 0xA7	; 167
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	8d 93       	st	X+, r24
    17f8:	9c 93       	st	X, r25
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 5a       	subi	r30, 0xAB	; 171
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_sendCommand+0x184>
    1808:	fe 01       	movw	r30, r28
    180a:	eb 5a       	subi	r30, 0xAB	; 171
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    181c:	fe 01       	movw	r30, r28
    181e:	ef 5a       	subi	r30, 0xAF	; 175
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e8       	ldi	r26, 0x80	; 128
    1828:	bf e3       	ldi	r27, 0x3F	; 63
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	03 5b       	subi	r16, 0xB3	; 179
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	ef 5a       	subi	r30, 0xAF	; 175
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a e7       	ldi	r20, 0x7A	; 122
    184c:	55 e4       	ldi	r21, 0x45	; 69
    184e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	e3 5b       	subi	r30, 0xB3	; 179
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    187a:	88 23       	and	r24, r24
    187c:	44 f4       	brge	.+16     	; 0x188e <LCD_sendCommand+0x20e>
		__ticks = 1;
    187e:	fe 01       	movw	r30, r28
    1880:	e5 5b       	subi	r30, 0xB5	; 181
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    188e:	fe 01       	movw	r30, r28
    1890:	e3 5b       	subi	r30, 0xB3	; 179
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <LCD_sendCommand+0x22e>
    18ac:	43 c0       	rjmp	.+134    	; 0x1934 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 5a       	subi	r30, 0xAF	; 175
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8e 01       	movw	r16, r28
    18ce:	05 5b       	subi	r16, 0xB5	; 181
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <LCD_sendCommand+0x2a4>
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5b       	subi	r30, 0xB7	; 183
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 e9       	ldi	r24, 0x90	; 144
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	e7 5b       	subi	r30, 0xB7	; 183
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_sendCommand+0x27e>
    1902:	fe 01       	movw	r30, r28
    1904:	e7 5b       	subi	r30, 0xB7	; 183
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	de 01       	movw	r26, r28
    190e:	a5 5b       	subi	r26, 0xB5	; 181
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	e5 5b       	subi	r30, 0xB5	; 181
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	fe 01       	movw	r30, r28
    1926:	e5 5b       	subi	r30, 0xB5	; 181
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	d1 f6       	brne	.-76     	; 0x18e6 <LCD_sendCommand+0x266>
    1932:	27 c0       	rjmp	.+78     	; 0x1982 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	8e 01       	movw	r16, r28
    1936:	05 5b       	subi	r16, 0xB5	; 181
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	fe 01       	movw	r30, r28
    193c:	e3 5b       	subi	r30, 0xB3	; 179
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	de 01       	movw	r26, r28
    1958:	a9 5b       	subi	r26, 0xB9	; 185
    195a:	bf 4f       	sbci	r27, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e5 5b       	subi	r30, 0xB5	; 181
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	8d 93       	st	X+, r24
    1968:	9c 93       	st	X, r25
    196a:	fe 01       	movw	r30, r28
    196c:	e9 5b       	subi	r30, 0xB9	; 185
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_sendCommand+0x2f4>
    1978:	fe 01       	movw	r30, r28
    197a:	e9 5b       	subi	r30, 0xB9	; 185
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW) /* Disable LCD E=0 */;
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_MODE==4)
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(command,4));
    1982:	fe 01       	movw	r30, r28
    1984:	ed 59       	subi	r30, 0x9D	; 157
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	80 71       	andi	r24, 0x10	; 16
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	95 95       	asr	r25
    1994:	87 95       	ror	r24
    1996:	95 95       	asr	r25
    1998:	87 95       	ror	r24
    199a:	95 95       	asr	r25
    199c:	87 95       	ror	r24
    199e:	95 95       	asr	r25
    19a0:	87 95       	ror	r24
    19a2:	98 2f       	mov	r25, r24
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	49 2f       	mov	r20, r25
    19aa:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(command,5));
    19ae:	fe 01       	movw	r30, r28
    19b0:	ed 59       	subi	r30, 0x9D	; 157
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	80 72       	andi	r24, 0x20	; 32
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	95 95       	asr	r25
    19c0:	87 95       	ror	r24
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	95 95       	asr	r25
    19c8:	87 95       	ror	r24
    19ca:	95 95       	asr	r25
    19cc:	87 95       	ror	r24
    19ce:	95 95       	asr	r25
    19d0:	87 95       	ror	r24
    19d2:	98 2f       	mov	r25, r24
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	64 e0       	ldi	r22, 0x04	; 4
    19d8:	49 2f       	mov	r20, r25
    19da:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(command,6));
    19de:	fe 01       	movw	r30, r28
    19e0:	ed 59       	subi	r30, 0x9D	; 157
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	80 74       	andi	r24, 0x40	; 64
    19ec:	90 70       	andi	r25, 0x00	; 0
    19ee:	08 2e       	mov	r0, r24
    19f0:	89 2f       	mov	r24, r25
    19f2:	00 0c       	add	r0, r0
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 0b       	sbc	r25, r25
    19f8:	00 0c       	add	r0, r0
    19fa:	88 1f       	adc	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	98 2f       	mov	r25, r24
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	65 e0       	ldi	r22, 0x05	; 5
    1a04:	49 2f       	mov	r20, r25
    1a06:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(command,7));
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 59       	subi	r30, 0x9D	; 157
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	98 2f       	mov	r25, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	99 27       	eor	r25, r25
    1a18:	99 1f       	adc	r25, r25
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	66 e0       	ldi	r22, 0x06	; 6
    1a1e:	49 2f       	mov	r20, r25
    1a20:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 5b       	subi	r30, 0xBD	; 189
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 e8       	ldi	r26, 0x80	; 128
    1a30:	bf e3       	ldi	r27, 0x3F	; 63
    1a32:	80 83       	st	Z, r24
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	a2 83       	std	Z+2, r26	; 0x02
    1a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	01 5c       	subi	r16, 0xC1	; 193
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	fe 01       	movw	r30, r28
    1a42:	ed 5b       	subi	r30, 0xBD	; 189
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a e7       	ldi	r20, 0x7A	; 122
    1a54:	55 e4       	ldi	r21, 0x45	; 69
    1a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	f8 01       	movw	r30, r16
    1a60:	80 83       	st	Z, r24
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	a2 83       	std	Z+2, r26	; 0x02
    1a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ff 96       	adiw	r30, 0x3f	; 63
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <LCD_sendCommand+0x40e>
		__ticks = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9e af       	std	Y+62, r25	; 0x3e
    1a8a:	8d af       	std	Y+61, r24	; 0x3d
    1a8c:	46 c0       	rjmp	.+140    	; 0x1b1a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ff 96       	adiw	r30, 0x3f	; 63
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	64 f5       	brge	.+88     	; 0x1b02 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ed 5b       	subi	r30, 0xBD	; 189
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e af       	std	Y+62, r25	; 0x3e
    1ad6:	8d af       	std	Y+61, r24	; 0x3d
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <LCD_sendCommand+0x478>
    1ada:	80 e9       	ldi	r24, 0x90	; 144
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	9c af       	std	Y+60, r25	; 0x3c
    1ae0:	8b af       	std	Y+59, r24	; 0x3b
    1ae2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ae4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_sendCommand+0x466>
    1aea:	9c af       	std	Y+60, r25	; 0x3c
    1aec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1af0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e af       	std	Y+62, r25	; 0x3e
    1af6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1afa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <LCD_sendCommand+0x45a>
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	fe 01       	movw	r30, r28
    1b04:	ff 96       	adiw	r30, 0x3f	; 63
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9e af       	std	Y+62, r25	; 0x3e
    1b18:	8d af       	std	Y+61, r24	; 0x3d
    1b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b1e:	9a af       	std	Y+58, r25	; 0x3a
    1b20:	89 af       	std	Y+57, r24	; 0x39
    1b22:	89 ad       	ldd	r24, Y+57	; 0x39
    1b24:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_sendCommand+0x4a6>
    1b2a:	9a af       	std	Y+58, r25	; 0x3a
    1b2c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e8       	ldi	r26, 0x80	; 128
    1b3e:	bf e3       	ldi	r27, 0x3F	; 63
    1b40:	8d ab       	std	Y+53, r24	; 0x35
    1b42:	9e ab       	std	Y+54, r25	; 0x36
    1b44:	af ab       	std	Y+55, r26	; 0x37
    1b46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	6d a9       	ldd	r22, Y+53	; 0x35
    1b4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a e7       	ldi	r20, 0x7A	; 122
    1b56:	55 e4       	ldi	r21, 0x45	; 69
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	89 ab       	std	Y+49, r24	; 0x31
    1b62:	9a ab       	std	Y+50, r25	; 0x32
    1b64:	ab ab       	std	Y+51, r26	; 0x33
    1b66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b68:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_sendCommand+0x50a>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	98 ab       	std	Y+48, r25	; 0x30
    1b86:	8f a7       	std	Y+47, r24	; 0x2f
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b90:	9c a9       	ldd	r25, Y+52	; 0x34
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba8:	98 ad       	ldd	r25, Y+56	; 0x38
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	98 ab       	std	Y+48, r25	; 0x30
    1bc8:	8f a7       	std	Y+47, r24	; 0x2f
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <LCD_sendCommand+0x56a>
    1bcc:	80 e9       	ldi	r24, 0x90	; 144
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	9e a7       	std	Y+46, r25	; 0x2e
    1bd2:	8d a7       	std	Y+45, r24	; 0x2d
    1bd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_sendCommand+0x558>
    1bdc:	9e a7       	std	Y+46, r25	; 0x2e
    1bde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be2:	98 a9       	ldd	r25, Y+48	; 0x30
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	98 ab       	std	Y+48, r25	; 0x30
    1be8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bec:	98 a9       	ldd	r25, Y+48	; 0x30
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <LCD_sendCommand+0x54c>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	98 ab       	std	Y+48, r25	; 0x30
    1c06:	8f a7       	std	Y+47, r24	; 0x2f
    1c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0c:	9c a7       	std	Y+44, r25	; 0x2c
    1c0e:	8b a7       	std	Y+43, r24	; 0x2b
    1c10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_sendCommand+0x594>
    1c18:	9c a7       	std	Y+44, r25	; 0x2c
    1c1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	8f a3       	std	Y+39, r24	; 0x27
    1c30:	98 a7       	std	Y+40, r25	; 0x28
    1c32:	a9 a7       	std	Y+41, r26	; 0x29
    1c34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6f a1       	ldd	r22, Y+39	; 0x27
    1c38:	78 a5       	ldd	r23, Y+40	; 0x28
    1c3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a e7       	ldi	r20, 0x7A	; 122
    1c44:	55 e4       	ldi	r21, 0x45	; 69
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8b a3       	std	Y+35, r24	; 0x23
    1c50:	9c a3       	std	Y+36, r25	; 0x24
    1c52:	ad a3       	std	Y+37, r26	; 0x25
    1c54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c56:	6b a1       	ldd	r22, Y+35	; 0x23
    1c58:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9a a3       	std	Y+34, r25	; 0x22
    1c74:	89 a3       	std	Y+33, r24	; 0x21
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1c78:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6f a1       	ldd	r22, Y+39	; 0x27
    1c92:	78 a5       	ldd	r23, Y+40	; 0x28
    1c94:	89 a5       	ldd	r24, Y+41	; 0x29
    1c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9a a3       	std	Y+34, r25	; 0x22
    1cb6:	89 a3       	std	Y+33, r24	; 0x21
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_sendCommand+0x658>
    1cba:	80 e9       	ldi	r24, 0x90	; 144
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	98 a3       	std	Y+32, r25	; 0x20
    1cc0:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_sendCommand+0x646>
    1cca:	98 a3       	std	Y+32, r25	; 0x20
    1ccc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9a a3       	std	Y+34, r25	; 0x22
    1cd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cda:	9a a1       	ldd	r25, Y+34	; 0x22
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_sendCommand+0x63a>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9a a3       	std	Y+34, r25	; 0x22
    1cf4:	89 a3       	std	Y+33, r24	; 0x21
    1cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cfc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_sendCommand+0x682>
    1d06:	9e 8f       	std	Y+30, r25	; 0x1e
    1d08:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(command,0));
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ed 59       	subi	r30, 0x9D	; 157
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	98 2f       	mov	r25, r24
    1d14:	91 70       	andi	r25, 0x01	; 1
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(command,1));
    1d20:	fe 01       	movw	r30, r28
    1d22:	ed 59       	subi	r30, 0x9D	; 157
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	82 70       	andi	r24, 0x02	; 2
    1d2e:	90 70       	andi	r25, 0x00	; 0
    1d30:	95 95       	asr	r25
    1d32:	87 95       	ror	r24
    1d34:	98 2f       	mov	r25, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(command,2));
    1d40:	fe 01       	movw	r30, r28
    1d42:	ed 59       	subi	r30, 0x9D	; 157
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	84 70       	andi	r24, 0x04	; 4
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	95 95       	asr	r25
    1d52:	87 95       	ror	r24
    1d54:	95 95       	asr	r25
    1d56:	87 95       	ror	r24
    1d58:	98 2f       	mov	r25, r24
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	65 e0       	ldi	r22, 0x05	; 5
    1d5e:	49 2f       	mov	r20, r25
    1d60:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(command,3));
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 59       	subi	r30, 0x9D	; 157
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	88 70       	andi	r24, 0x08	; 8
    1d72:	90 70       	andi	r25, 0x00	; 0
    1d74:	95 95       	asr	r25
    1d76:	87 95       	ror	r24
    1d78:	95 95       	asr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	95 95       	asr	r25
    1d7e:	87 95       	ror	r24
    1d80:	98 2f       	mov	r25, r24
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	66 e0       	ldi	r22, 0x06	; 6
    1d86:	49 2f       	mov	r20, r25
    1d88:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	89 8f       	std	Y+25, r24	; 0x19
    1d96:	9a 8f       	std	Y+26, r25	; 0x1a
    1d98:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a e7       	ldi	r20, 0x7A	; 122
    1daa:	55 e4       	ldi	r21, 0x45	; 69
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8d 8b       	std	Y+21, r24	; 0x15
    1db6:	9e 8b       	std	Y+22, r25	; 0x16
    1db8:	af 8b       	std	Y+23, r26	; 0x17
    1dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_sendCommand+0x75e>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	69 8d       	ldd	r22, Y+25	; 0x19
    1df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_sendCommand+0x7be>
    1e20:	80 e9       	ldi	r24, 0x90	; 144
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_sendCommand+0x7ac>
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9c 8b       	std	Y+20, r25	; 0x14
    1e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_sendCommand+0x7a0>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	98 89       	ldd	r25, Y+16	; 0x10
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_sendCommand+0x7e8>
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a e7       	ldi	r20, 0x7A	; 122
    1e98:	55 e4       	ldi	r21, 0x45	; 69
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_sendCommand+0x84c>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_sendCommand+0x8ac>
    1f0e:	80 e9       	ldi	r24, 0x90	; 144
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0x89a>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_sendCommand+0x88e>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_sendCommand+0x8d6>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif

}
    1f5e:	cd 59       	subi	r28, 0x9D	; 157
    1f60:	df 4f       	sbci	r29, 0xFF	; 255
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <LCD_displayChar>:

void LCD_displayChar(unsigned char data){
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	c3 56       	subi	r28, 0x63	; 99
    1f84:	d0 40       	sbci	r29, 0x00	; 0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	fe 01       	movw	r30, r28
    1f92:	ed 59       	subi	r30, 0x9D	; 157
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e1 5a       	subi	r30, 0xA1	; 161
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a0 e8       	ldi	r26, 0x80	; 128
    1fae:	bf e3       	ldi	r27, 0x3F	; 63
    1fb0:	80 83       	st	Z, r24
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	a2 83       	std	Z+2, r26	; 0x02
    1fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	8e 01       	movw	r16, r28
    1fba:	05 5a       	subi	r16, 0xA5	; 165
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e1 5a       	subi	r30, 0xA1	; 161
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	55 e4       	ldi	r21, 0x45	; 69
    1fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 83       	st	Z, r24
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	a2 83       	std	Z+2, r26	; 0x02
    1fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e5 5a       	subi	r30, 0xA5	; 165
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	44 f4       	brge	.+16     	; 0x2014 <LCD_displayChar+0x9e>
		__ticks = 1;
    2004:	fe 01       	movw	r30, r28
    2006:	e7 5a       	subi	r30, 0xA7	; 167
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	64 c0       	rjmp	.+200    	; 0x20dc <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    2014:	fe 01       	movw	r30, r28
    2016:	e5 5a       	subi	r30, 0xA5	; 165
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	0c f0       	brlt	.+2      	; 0x2034 <LCD_displayChar+0xbe>
    2032:	43 c0       	rjmp	.+134    	; 0x20ba <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	fe 01       	movw	r30, r28
    2036:	e1 5a       	subi	r30, 0xA1	; 161
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8e 01       	movw	r16, r28
    2054:	07 5a       	subi	r16, 0xA7	; 167
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    206a:	1f c0       	rjmp	.+62     	; 0x20aa <LCD_displayChar+0x134>
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5a       	subi	r30, 0xA9	; 169
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 e9       	ldi	r24, 0x90	; 144
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	fe 01       	movw	r30, r28
    207c:	e9 5a       	subi	r30, 0xA9	; 169
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_displayChar+0x10e>
    2088:	fe 01       	movw	r30, r28
    208a:	e9 5a       	subi	r30, 0xA9	; 169
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	de 01       	movw	r26, r28
    2094:	a7 5a       	subi	r26, 0xA7	; 167
    2096:	bf 4f       	sbci	r27, 0xFF	; 255
    2098:	fe 01       	movw	r30, r28
    209a:	e7 5a       	subi	r30, 0xA7	; 167
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	11 96       	adiw	r26, 0x01	; 1
    20a6:	9c 93       	st	X, r25
    20a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	fe 01       	movw	r30, r28
    20ac:	e7 5a       	subi	r30, 0xA7	; 167
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	d1 f6       	brne	.-76     	; 0x206c <LCD_displayChar+0xf6>
    20b8:	27 c0       	rjmp	.+78     	; 0x2108 <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	8e 01       	movw	r16, r28
    20bc:	07 5a       	subi	r16, 0xA7	; 167
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
    20c0:	fe 01       	movw	r30, r28
    20c2:	e5 5a       	subi	r30, 0xA5	; 165
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	de 01       	movw	r26, r28
    20de:	ab 5a       	subi	r26, 0xAB	; 171
    20e0:	bf 4f       	sbci	r27, 0xFF	; 255
    20e2:	fe 01       	movw	r30, r28
    20e4:	e7 5a       	subi	r30, 0xA7	; 167
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	8d 93       	st	X+, r24
    20ee:	9c 93       	st	X, r25
    20f0:	fe 01       	movw	r30, r28
    20f2:	eb 5a       	subi	r30, 0xAB	; 171
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_displayChar+0x184>
    20fe:	fe 01       	movw	r30, r28
    2100:	eb 5a       	subi	r30, 0xAB	; 171
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);  /* Enable LCD E=1 */
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    2112:	fe 01       	movw	r30, r28
    2114:	ef 5a       	subi	r30, 0xAF	; 175
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	a2 83       	std	Z+2, r26	; 0x02
    2126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	8e 01       	movw	r16, r28
    212a:	03 5b       	subi	r16, 0xB3	; 179
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	ef 5a       	subi	r30, 0xAF	; 175
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	55 e4       	ldi	r21, 0x45	; 69
    2144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	80 83       	st	Z, r24
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	a2 83       	std	Z+2, r26	; 0x02
    2154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2156:	fe 01       	movw	r30, r28
    2158:	e3 5b       	subi	r30, 0xB3	; 179
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	44 f4       	brge	.+16     	; 0x2184 <LCD_displayChar+0x20e>
		__ticks = 1;
    2174:	fe 01       	movw	r30, r28
    2176:	e5 5b       	subi	r30, 0xB5	; 181
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	64 c0       	rjmp	.+200    	; 0x224c <LCD_displayChar+0x2d6>
	else if (__tmp > 65535)
    2184:	fe 01       	movw	r30, r28
    2186:	e3 5b       	subi	r30, 0xB3	; 179
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	0c f0       	brlt	.+2      	; 0x21a4 <LCD_displayChar+0x22e>
    21a2:	43 c0       	rjmp	.+134    	; 0x222a <LCD_displayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	fe 01       	movw	r30, r28
    21a6:	ef 5a       	subi	r30, 0xAF	; 175
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8e 01       	movw	r16, r28
    21c4:	05 5b       	subi	r16, 0xB5	; 181
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	1f c0       	rjmp	.+62     	; 0x221a <LCD_displayChar+0x2a4>
    21dc:	fe 01       	movw	r30, r28
    21de:	e7 5b       	subi	r30, 0xB7	; 183
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 e9       	ldi	r24, 0x90	; 144
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	fe 01       	movw	r30, r28
    21ec:	e7 5b       	subi	r30, 0xB7	; 183
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_displayChar+0x27e>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e7 5b       	subi	r30, 0xB7	; 183
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	de 01       	movw	r26, r28
    2204:	a5 5b       	subi	r26, 0xB5	; 181
    2206:	bf 4f       	sbci	r27, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	e5 5b       	subi	r30, 0xB5	; 181
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	9c 93       	st	X, r25
    2218:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	fe 01       	movw	r30, r28
    221c:	e5 5b       	subi	r30, 0xB5	; 181
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	d1 f6       	brne	.-76     	; 0x21dc <LCD_displayChar+0x266>
    2228:	27 c0       	rjmp	.+78     	; 0x2278 <LCD_displayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	8e 01       	movw	r16, r28
    222c:	05 5b       	subi	r16, 0xB5	; 181
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	e3 5b       	subi	r30, 0xB3	; 179
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	f8 01       	movw	r30, r16
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	de 01       	movw	r26, r28
    224e:	a9 5b       	subi	r26, 0xB9	; 185
    2250:	bf 4f       	sbci	r27, 0xFF	; 255
    2252:	fe 01       	movw	r30, r28
    2254:	e5 5b       	subi	r30, 0xB5	; 181
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	8d 93       	st	X+, r24
    225e:	9c 93       	st	X, r25
    2260:	fe 01       	movw	r30, r28
    2262:	e9 5b       	subi	r30, 0xB9	; 185
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_displayChar+0x2f4>
    226e:	fe 01       	movw	r30, r28
    2270:	e9 5b       	subi	r30, 0xB9	; 185
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_MODE==4)
	/* out the required data to the data bus D4 --> D7 */
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(data,4));
    2278:	fe 01       	movw	r30, r28
    227a:	ed 59       	subi	r30, 0x9D	; 157
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	80 71       	andi	r24, 0x10	; 16
    2286:	90 70       	andi	r25, 0x00	; 0
    2288:	95 95       	asr	r25
    228a:	87 95       	ror	r24
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	95 95       	asr	r25
    2292:	87 95       	ror	r24
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	98 2f       	mov	r25, r24
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	63 e0       	ldi	r22, 0x03	; 3
    229e:	49 2f       	mov	r20, r25
    22a0:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(data,5));
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 59       	subi	r30, 0x9D	; 157
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	80 72       	andi	r24, 0x20	; 32
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	95 95       	asr	r25
    22b6:	87 95       	ror	r24
    22b8:	95 95       	asr	r25
    22ba:	87 95       	ror	r24
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	95 95       	asr	r25
    22c6:	87 95       	ror	r24
    22c8:	98 2f       	mov	r25, r24
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	49 2f       	mov	r20, r25
    22d0:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(data,6));
    22d4:	fe 01       	movw	r30, r28
    22d6:	ed 59       	subi	r30, 0x9D	; 157
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	80 74       	andi	r24, 0x40	; 64
    22e2:	90 70       	andi	r25, 0x00	; 0
    22e4:	08 2e       	mov	r0, r24
    22e6:	89 2f       	mov	r24, r25
    22e8:	00 0c       	add	r0, r0
    22ea:	88 1f       	adc	r24, r24
    22ec:	99 0b       	sbc	r25, r25
    22ee:	00 0c       	add	r0, r0
    22f0:	88 1f       	adc	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	98 2f       	mov	r25, r24
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	65 e0       	ldi	r22, 0x05	; 5
    22fa:	49 2f       	mov	r20, r25
    22fc:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(data,7));
    2300:	fe 01       	movw	r30, r28
    2302:	ed 59       	subi	r30, 0x9D	; 157
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	98 2f       	mov	r25, r24
    230a:	99 1f       	adc	r25, r25
    230c:	99 27       	eor	r25, r25
    230e:	99 1f       	adc	r25, r25
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	66 e0       	ldi	r22, 0x06	; 6
    2314:	49 2f       	mov	r20, r25
    2316:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    231a:	fe 01       	movw	r30, r28
    231c:	ed 5b       	subi	r30, 0xBD	; 189
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 e8       	ldi	r26, 0x80	; 128
    2326:	bf e3       	ldi	r27, 0x3F	; 63
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2330:	8e 01       	movw	r16, r28
    2332:	01 5c       	subi	r16, 0xC1	; 193
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	fe 01       	movw	r30, r28
    2338:	ed 5b       	subi	r30, 0xBD	; 189
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a e7       	ldi	r20, 0x7A	; 122
    234a:	55 e4       	ldi	r21, 0x45	; 69
    234c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	f8 01       	movw	r30, r16
    2356:	80 83       	st	Z, r24
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	a2 83       	std	Z+2, r26	; 0x02
    235c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    235e:	fe 01       	movw	r30, r28
    2360:	ff 96       	adiw	r30, 0x3f	; 63
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_displayChar+0x40e>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9e af       	std	Y+62, r25	; 0x3e
    2380:	8d af       	std	Y+61, r24	; 0x3d
    2382:	46 c0       	rjmp	.+140    	; 0x2410 <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    2384:	fe 01       	movw	r30, r28
    2386:	ff 96       	adiw	r30, 0x3f	; 63
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	64 f5       	brge	.+88     	; 0x23f8 <LCD_displayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 5b       	subi	r30, 0xBD	; 189
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9e af       	std	Y+62, r25	; 0x3e
    23cc:	8d af       	std	Y+61, r24	; 0x3d
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <LCD_displayChar+0x478>
    23d0:	80 e9       	ldi	r24, 0x90	; 144
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	9c af       	std	Y+60, r25	; 0x3c
    23d6:	8b af       	std	Y+59, r24	; 0x3b
    23d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23da:	9c ad       	ldd	r25, Y+60	; 0x3c
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_displayChar+0x466>
    23e0:	9c af       	std	Y+60, r25	; 0x3c
    23e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	9e af       	std	Y+62, r25	; 0x3e
    23ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <LCD_displayChar+0x45a>
    23f6:	16 c0       	rjmp	.+44     	; 0x2424 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	fe 01       	movw	r30, r28
    23fa:	ff 96       	adiw	r30, 0x3f	; 63
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e af       	std	Y+62, r25	; 0x3e
    240e:	8d af       	std	Y+61, r24	; 0x3d
    2410:	8d ad       	ldd	r24, Y+61	; 0x3d
    2412:	9e ad       	ldd	r25, Y+62	; 0x3e
    2414:	9a af       	std	Y+58, r25	; 0x3a
    2416:	89 af       	std	Y+57, r24	; 0x39
    2418:	89 ad       	ldd	r24, Y+57	; 0x39
    241a:	9a ad       	ldd	r25, Y+58	; 0x3a
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_displayChar+0x4a6>
    2420:	9a af       	std	Y+58, r25	; 0x3a
    2422:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW);/* Disable LCD E=0 */
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e8       	ldi	r26, 0x80	; 128
    2434:	bf e3       	ldi	r27, 0x3F	; 63
    2436:	8d ab       	std	Y+53, r24	; 0x35
    2438:	9e ab       	std	Y+54, r25	; 0x36
    243a:	af ab       	std	Y+55, r26	; 0x37
    243c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6d a9       	ldd	r22, Y+53	; 0x35
    2440:	7e a9       	ldd	r23, Y+54	; 0x36
    2442:	8f a9       	ldd	r24, Y+55	; 0x37
    2444:	98 ad       	ldd	r25, Y+56	; 0x38
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a e7       	ldi	r20, 0x7A	; 122
    244c:	55 e4       	ldi	r21, 0x45	; 69
    244e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	89 ab       	std	Y+49, r24	; 0x31
    2458:	9a ab       	std	Y+50, r25	; 0x32
    245a:	ab ab       	std	Y+51, r26	; 0x33
    245c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_displayChar+0x50a>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	98 ab       	std	Y+48, r25	; 0x30
    247c:	8f a7       	std	Y+47, r24	; 0x2f
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_displayChar+0x588>
	else if (__tmp > 65535)
    2480:	69 a9       	ldd	r22, Y+49	; 0x31
    2482:	7a a9       	ldd	r23, Y+50	; 0x32
    2484:	8b a9       	ldd	r24, Y+51	; 0x33
    2486:	9c a9       	ldd	r25, Y+52	; 0x34
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_displayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6d a9       	ldd	r22, Y+53	; 0x35
    249a:	7e a9       	ldd	r23, Y+54	; 0x36
    249c:	8f a9       	ldd	r24, Y+55	; 0x37
    249e:	98 ad       	ldd	r25, Y+56	; 0x38
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	98 ab       	std	Y+48, r25	; 0x30
    24be:	8f a7       	std	Y+47, r24	; 0x2f
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_displayChar+0x56a>
    24c2:	80 e9       	ldi	r24, 0x90	; 144
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	9e a7       	std	Y+46, r25	; 0x2e
    24c8:	8d a7       	std	Y+45, r24	; 0x2d
    24ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    24cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_displayChar+0x558>
    24d2:	9e a7       	std	Y+46, r25	; 0x2e
    24d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d8:	98 a9       	ldd	r25, Y+48	; 0x30
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	98 ab       	std	Y+48, r25	; 0x30
    24de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e2:	98 a9       	ldd	r25, Y+48	; 0x30
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_displayChar+0x54c>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <LCD_displayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	69 a9       	ldd	r22, Y+49	; 0x31
    24ec:	7a a9       	ldd	r23, Y+50	; 0x32
    24ee:	8b a9       	ldd	r24, Y+51	; 0x33
    24f0:	9c a9       	ldd	r25, Y+52	; 0x34
    24f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2500:	98 a9       	ldd	r25, Y+48	; 0x30
    2502:	9c a7       	std	Y+44, r25	; 0x2c
    2504:	8b a7       	std	Y+43, r24	; 0x2b
    2506:	8b a5       	ldd	r24, Y+43	; 0x2b
    2508:	9c a5       	ldd	r25, Y+44	; 0x2c
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_displayChar+0x594>
    250e:	9c a7       	std	Y+44, r25	; 0x2c
    2510:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* delay for processing Th = 13ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	8f a3       	std	Y+39, r24	; 0x27
    2526:	98 a7       	std	Y+40, r25	; 0x28
    2528:	a9 a7       	std	Y+41, r26	; 0x29
    252a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6f a1       	ldd	r22, Y+39	; 0x27
    252e:	78 a5       	ldd	r23, Y+40	; 0x28
    2530:	89 a5       	ldd	r24, Y+41	; 0x29
    2532:	9a a5       	ldd	r25, Y+42	; 0x2a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	55 e4       	ldi	r21, 0x45	; 69
    253c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8b a3       	std	Y+35, r24	; 0x23
    2546:	9c a3       	std	Y+36, r25	; 0x24
    2548:	ad a3       	std	Y+37, r26	; 0x25
    254a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_displayChar+0x5f8>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    256e:	6b a1       	ldd	r22, Y+35	; 0x23
    2570:	7c a1       	ldd	r23, Y+36	; 0x24
    2572:	8d a1       	ldd	r24, Y+37	; 0x25
    2574:	9e a1       	ldd	r25, Y+38	; 0x26
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6f a1       	ldd	r22, Y+39	; 0x27
    2588:	78 a5       	ldd	r23, Y+40	; 0x28
    258a:	89 a5       	ldd	r24, Y+41	; 0x29
    258c:	9a a5       	ldd	r25, Y+42	; 0x2a
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_displayChar+0x658>
    25b0:	80 e9       	ldi	r24, 0x90	; 144
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	98 a3       	std	Y+32, r25	; 0x20
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
    25b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ba:	98 a1       	ldd	r25, Y+32	; 0x20
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_displayChar+0x646>
    25c0:	98 a3       	std	Y+32, r25	; 0x20
    25c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	89 a1       	ldd	r24, Y+33	; 0x21
    25c6:	9a a1       	ldd	r25, Y+34	; 0x22
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9a a3       	std	Y+34, r25	; 0x22
    25cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	89 a1       	ldd	r24, Y+33	; 0x21
    25d0:	9a a1       	ldd	r25, Y+34	; 0x22
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_displayChar+0x63a>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6b a1       	ldd	r22, Y+35	; 0x23
    25da:	7c a1       	ldd	r23, Y+36	; 0x24
    25dc:	8d a1       	ldd	r24, Y+37	; 0x25
    25de:	9e a1       	ldd	r25, Y+38	; 0x26
    25e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	9e 8f       	std	Y+30, r25	; 0x1e
    25f2:	8d 8f       	std	Y+29, r24	; 0x1d
    25f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_displayChar+0x682>
    25fc:	9e 8f       	std	Y+30, r25	; 0x1e
    25fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* out the rest of the required data to the data bus D4 --> D7 */
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB4_ID,GET_BIT(data,0));
    2600:	fe 01       	movw	r30, r28
    2602:	ed 59       	subi	r30, 0x9D	; 157
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	98 2f       	mov	r25, r24
    260a:	91 70       	andi	r25, 0x01	; 1
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	63 e0       	ldi	r22, 0x03	; 3
    2610:	49 2f       	mov	r20, r25
    2612:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB5_ID,GET_BIT(data,1));
    2616:	fe 01       	movw	r30, r28
    2618:	ed 59       	subi	r30, 0x9D	; 157
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	82 70       	andi	r24, 0x02	; 2
    2624:	90 70       	andi	r25, 0x00	; 0
    2626:	95 95       	asr	r25
    2628:	87 95       	ror	r24
    262a:	98 2f       	mov	r25, r24
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	64 e0       	ldi	r22, 0x04	; 4
    2630:	49 2f       	mov	r20, r25
    2632:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB6_ID,GET_BIT(data,2));
    2636:	fe 01       	movw	r30, r28
    2638:	ed 59       	subi	r30, 0x9D	; 157
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	84 70       	andi	r24, 0x04	; 4
    2644:	90 70       	andi	r25, 0x00	; 0
    2646:	95 95       	asr	r25
    2648:	87 95       	ror	r24
    264a:	95 95       	asr	r25
    264c:	87 95       	ror	r24
    264e:	98 2f       	mov	r25, r24
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	65 e0       	ldi	r22, 0x05	; 5
    2654:	49 2f       	mov	r20, r25
    2656:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PATH_REG,LCD_DB7_ID,GET_BIT(data,3));
    265a:	fe 01       	movw	r30, r28
    265c:	ed 59       	subi	r30, 0x9D	; 157
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	88 70       	andi	r24, 0x08	; 8
    2668:	90 70       	andi	r25, 0x00	; 0
    266a:	95 95       	asr	r25
    266c:	87 95       	ror	r24
    266e:	95 95       	asr	r25
    2670:	87 95       	ror	r24
    2672:	95 95       	asr	r25
    2674:	87 95       	ror	r24
    2676:	98 2f       	mov	r25, r24
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	66 e0       	ldi	r22, 0x06	; 6
    267c:	49 2f       	mov	r20, r25
    267e:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a0 e8       	ldi	r26, 0x80	; 128
    2688:	bf e3       	ldi	r27, 0x3F	; 63
    268a:	89 8f       	std	Y+25, r24	; 0x19
    268c:	9a 8f       	std	Y+26, r25	; 0x1a
    268e:	ab 8f       	std	Y+27, r26	; 0x1b
    2690:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	69 8d       	ldd	r22, Y+25	; 0x19
    2694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a e7       	ldi	r20, 0x7A	; 122
    26a0:	55 e4       	ldi	r21, 0x45	; 69
    26a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8d 8b       	std	Y+21, r24	; 0x15
    26ac:	9e 8b       	std	Y+22, r25	; 0x16
    26ae:	af 8b       	std	Y+23, r26	; 0x17
    26b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b2:	6d 89       	ldd	r22, Y+21	; 0x15
    26b4:	7e 89       	ldd	r23, Y+22	; 0x16
    26b6:	8f 89       	ldd	r24, Y+23	; 0x17
    26b8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <LCD_displayChar+0x75e>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9c 8b       	std	Y+20, r25	; 0x14
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <LCD_displayChar+0x7dc>
	else if (__tmp > 65535)
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	4c f5       	brge	.+82     	; 0x273e <LCD_displayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	69 8d       	ldd	r22, Y+25	; 0x19
    26ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <LCD_displayChar+0x7be>
    2716:	80 e9       	ldi	r24, 0x90	; 144
    2718:	91 e0       	ldi	r25, 0x01	; 1
    271a:	9a 8b       	std	Y+18, r25	; 0x12
    271c:	89 8b       	std	Y+17, r24	; 0x11
    271e:	89 89       	ldd	r24, Y+17	; 0x11
    2720:	9a 89       	ldd	r25, Y+18	; 0x12
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_displayChar+0x7ac>
    2726:	9a 8b       	std	Y+18, r25	; 0x12
    2728:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9c 8b       	std	Y+20, r25	; 0x14
    2732:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <LCD_displayChar+0x7a0>
    273c:	14 c0       	rjmp	.+40     	; 0x2766 <LCD_displayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	98 8b       	std	Y+16, r25	; 0x10
    2758:	8f 87       	std	Y+15, r24	; 0x0f
    275a:	8f 85       	ldd	r24, Y+15	; 0x0f
    275c:	98 89       	ldd	r25, Y+16	; 0x10
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_displayChar+0x7e8>
    2762:	98 8b       	std	Y+16, r25	; 0x10
    2764:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 3b 08 	call	0x1076	; 0x1076 <GPIO_writePin>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a0 e8       	ldi	r26, 0x80	; 128
    2776:	bf e3       	ldi	r27, 0x3F	; 63
    2778:	8b 87       	std	Y+11, r24	; 0x0b
    277a:	9c 87       	std	Y+12, r25	; 0x0c
    277c:	ad 87       	std	Y+13, r26	; 0x0d
    277e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e7       	ldi	r20, 0x7A	; 122
    278e:	55 e4       	ldi	r21, 0x45	; 69
    2790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8f 83       	std	Y+7, r24	; 0x07
    279a:	98 87       	std	Y+8, r25	; 0x08
    279c:	a9 87       	std	Y+9, r26	; 0x09
    279e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <LCD_displayChar+0x84c>
		__ticks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	3f c0       	rjmp	.+126    	; 0x2840 <LCD_displayChar+0x8ca>
	else if (__tmp > 65535)
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	3f ef       	ldi	r19, 0xFF	; 255
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	57 e4       	ldi	r21, 0x47	; 71
    27d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	4c f5       	brge	.+82     	; 0x282c <LCD_displayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	6b 85       	ldd	r22, Y+11	; 0x0b
    27dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27de:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e2       	ldi	r20, 0x20	; 32
    27e8:	51 e4       	ldi	r21, 0x41	; 65
    27ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	0f c0       	rjmp	.+30     	; 0x2822 <LCD_displayChar+0x8ac>
    2804:	80 e9       	ldi	r24, 0x90	; 144
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_displayChar+0x89a>
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	69 f7       	brne	.-38     	; 0x2804 <LCD_displayChar+0x88e>
    282a:	14 c0       	rjmp	.+40     	; 0x2854 <LCD_displayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_displayChar+0x8d6>
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif

}
    2854:	cd 59       	subi	r28, 0x9D	; 157
    2856:	df 4f       	sbci	r29, 0xFF	; 255
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(unsigned char * LCD_data_ptr){
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <LCD_displayString+0x6>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	0a c0       	rjmp	.+20     	; 0x2890 <LCD_displayString+0x24>
	while(*LCD_data_ptr!='\0'){
		LCD_displayChar(*LCD_data_ptr);
    287c:	e9 81       	ldd	r30, Y+1	; 0x01
    287e:	fa 81       	ldd	r31, Y+2	; 0x02
    2880:	80 81       	ld	r24, Z
    2882:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <LCD_displayChar>
		LCD_data_ptr++;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(unsigned char * LCD_data_ptr){
	while(*LCD_data_ptr!='\0'){
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	80 81       	ld	r24, Z
    2896:	88 23       	and	r24, r24
    2898:	89 f7       	brne	.-30     	; 0x287c <LCD_displayString+0x10>
		LCD_displayChar(*LCD_data_ptr);
		LCD_data_ptr++;
	}
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(unsigned char row,unsigned char column){
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <LCD_moveCursor+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <LCD_moveCursor+0x8>
    28ac:	0f 92       	push	r0
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	8a 83       	std	Y+2, r24	; 0x02
    28b4:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char LCD_address=0;
    28b6:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the required address in the LCD DDRAM */
	switch(row){
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	3d 83       	std	Y+5, r19	; 0x05
    28c0:	2c 83       	std	Y+4, r18	; 0x04
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	9d 81       	ldd	r25, Y+5	; 0x05
    28c6:	81 30       	cpi	r24, 0x01	; 1
    28c8:	91 05       	cpc	r25, r1
    28ca:	c1 f0       	breq	.+48     	; 0x28fc <LCD_moveCursor+0x58>
    28cc:	2c 81       	ldd	r18, Y+4	; 0x04
    28ce:	3d 81       	ldd	r19, Y+5	; 0x05
    28d0:	22 30       	cpi	r18, 0x02	; 2
    28d2:	31 05       	cpc	r19, r1
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <LCD_moveCursor+0x3c>
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	9d 81       	ldd	r25, Y+5	; 0x05
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	61 f0       	breq	.+24     	; 0x28f6 <LCD_moveCursor+0x52>
    28de:	19 c0       	rjmp	.+50     	; 0x2912 <LCD_moveCursor+0x6e>
    28e0:	2c 81       	ldd	r18, Y+4	; 0x04
    28e2:	3d 81       	ldd	r19, Y+5	; 0x05
    28e4:	22 30       	cpi	r18, 0x02	; 2
    28e6:	31 05       	cpc	r19, r1
    28e8:	69 f0       	breq	.+26     	; 0x2904 <LCD_moveCursor+0x60>
    28ea:	8c 81       	ldd	r24, Y+4	; 0x04
    28ec:	9d 81       	ldd	r25, Y+5	; 0x05
    28ee:	83 30       	cpi	r24, 0x03	; 3
    28f0:	91 05       	cpc	r25, r1
    28f2:	61 f0       	breq	.+24     	; 0x290c <LCD_moveCursor+0x68>
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <LCD_moveCursor+0x6e>
	case 0 :
	{
		LCD_address=column;
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	0b c0       	rjmp	.+22     	; 0x2912 <LCD_moveCursor+0x6e>
		break;
	}
	case 1 :
	{
		LCD_address=0x40+column;
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	80 5c       	subi	r24, 0xC0	; 192
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	07 c0       	rjmp	.+14     	; 0x2912 <LCD_moveCursor+0x6e>
		break;
	}
	case 2:
	{
		LCD_address=0x10+column;
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	80 5f       	subi	r24, 0xF0	; 240
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	03 c0       	rjmp	.+6      	; 0x2912 <LCD_moveCursor+0x6e>
		break;
	}
	case 3:
	{
		LCD_address=0x50+column;
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	80 5b       	subi	r24, 0xB0	; 176
    2910:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_CURSOR_POSITION|LCD_address);
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	80 68       	ori	r24, 0x80	; 128
    2916:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(unsigned char row,unsigned char column,const char*Str){
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <LCD_displayStringRowColumn+0x6>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <LCD_displayStringRowColumn+0x8>
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	6a 83       	std	Y+2, r22	; 0x02
    293a:	5c 83       	std	Y+4, r21	; 0x04
    293c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column); /* go to to the required LCD position */
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	6a 81       	ldd	r22, Y+2	; 0x02
    2942:	0e 94 52 14 	call	0x28a4	; 0x28a4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
}
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_sendCommand>
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	62 97       	sbiw	r28, 0x12	; 18
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	9a 8b       	std	Y+18, r25	; 0x12
    2986:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2988:	89 89       	ldd	r24, Y+17	; 0x11
    298a:	9a 89       	ldd	r25, Y+18	; 0x12
    298c:	9e 01       	movw	r18, r28
    298e:	2f 5f       	subi	r18, 0xFF	; 255
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	b9 01       	movw	r22, r18
    2994:	4a e0       	ldi	r20, 0x0A	; 10
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <itoa>
	LCD_displayString(buff); /* Display the string */
    299c:	ce 01       	movw	r24, r28
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	0e 94 36 14 	call	0x286c	; 0x286c <LCD_displayString>
}
    29a4:	62 96       	adiw	r28, 0x12	; 18
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <main>:
#include "flex_sensor.h"
#include "adc.h"
#include "gpio.h"
#include <util/delay.h>
int main()
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	2b 97       	sbiw	r28, 0x0b	; 11
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    29ca:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_init>
	ADC_ConfigType currentConfig;
	currentConfig.prescaler=PRESCALER_128;
    29ce:	87 e0       	ldi	r24, 0x07	; 7
    29d0:	8a 83       	std	Y+2, r24	; 0x02
	currentConfig.reference_mode=AVCC_MODE;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	89 83       	std	Y+1, r24	; 0x01
	ADC_init(&currentConfig);
    29d6:	ce 01       	movw	r24, r28
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_init>
	flex_parameters flexDirect;

	while(1)
	{
		flex_sensor_start(PIN0_ID,&flexDirect);
    29de:	9e 01       	movw	r18, r28
    29e0:	2d 5f       	subi	r18, 0xFD	; 253
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	b9 01       	movw	r22, r18
    29e8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <flex_sensor_start>
		//		LCD_displayString("Direction : ");
		//		LCD_intgerToString(flexDirect.movDirect);
		//		LCD_moveCursor(1,0);
		LCD_displayStringRowColumn(0,0," volt");
    29ec:	20 e6       	ldi	r18, 0x60	; 96
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	a9 01       	movw	r20, r18
    29f6:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_displayStringRowColumn>
		LCD_displayChar(' ');
    29fa:	80 e2       	ldi	r24, 0x20	; 32
    29fc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <LCD_displayChar>
		LCD_intgerToString(flexDirect.out_voltage);
    2a00:	8f 81       	ldd	r24, Y+7	; 0x07
    2a02:	98 85       	ldd	r25, Y+8	; 0x08
    2a04:	a9 85       	ldd	r26, Y+9	; 0x09
    2a06:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a08:	0e 94 b8 14 	call	0x2970	; 0x2970 <LCD_intgerToString>
		//LCD_moveCursor(2,0);
		LCD_displayStringRowColumn(1,0," Res");
    2a0c:	26 e6       	ldi	r18, 0x66	; 102
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	a9 01       	movw	r20, r18
    2a16:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_displayStringRowColumn>
		LCD_displayChar(' ');
    2a1a:	80 e2       	ldi	r24, 0x20	; 32
    2a1c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <LCD_displayChar>
		LCD_intgerToString(flexDirect.res);
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	ad 81       	ldd	r26, Y+5	; 0x05
    2a26:	be 81       	ldd	r27, Y+6	; 0x06
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	0e 94 b8 14 	call	0x2970	; 0x2970 <LCD_intgerToString>
    2a38:	d2 cf       	rjmp	.-92     	; 0x29de <main+0x28>

00002a3a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *UART_Config)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <UART_init+0x6>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <UART_init+0x8>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2a4a:	1a 82       	std	Y+2, r1	; 0x02
    2a4c:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a4e:	eb e2       	ldi	r30, 0x2B	; 43
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	80 83       	st	Z, r24
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    2a56:	aa e2       	ldi	r26, 0x2A	; 42
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	ea e2       	ldi	r30, 0x2A	; 42
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	88 69       	ori	r24, 0x98	; 152
    2a62:	8c 93       	st	X, r24
	UCSRC|=(1<<URSEL);
    2a64:	a0 e4       	ldi	r26, 0x40	; 64
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e0 e4       	ldi	r30, 0x40	; 64
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	8c 93       	st	X, r24


	if(UART_Config->parity==Even)
    2a72:	eb 81       	ldd	r30, Y+3	; 0x03
    2a74:	fc 81       	ldd	r31, Y+4	; 0x04
    2a76:	81 81       	ldd	r24, Z+1	; 0x01
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	41 f4       	brne	.+16     	; 0x2a8c <UART_init+0x52>
	{
		UCSRC|=(1<<UPM1);
    2a7c:	a0 e4       	ldi	r26, 0x40	; 64
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e0 e4       	ldi	r30, 0x40	; 64
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	80 62       	ori	r24, 0x20	; 32
    2a88:	8c 93       	st	X, r24
    2a8a:	0c c0       	rjmp	.+24     	; 0x2aa4 <UART_init+0x6a>
	}
	else if(UART_Config->parity==Odd)
    2a8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a90:	81 81       	ldd	r24, Z+1	; 0x01
    2a92:	88 23       	and	r24, r24
    2a94:	39 f4       	brne	.+14     	; 0x2aa4 <UART_init+0x6a>
		UCSRC|=(1<<UPM1)|(1<<UPM0);
    2a96:	a0 e4       	ldi	r26, 0x40	; 64
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e0 e4       	ldi	r30, 0x40	; 64
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 63       	ori	r24, 0x30	; 48
    2aa2:	8c 93       	st	X, r24

	if(UART_Config->stop_bit==UART_STOP_2BIT_SELECT)
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	39 f4       	brne	.+14     	; 0x2abc <UART_init+0x82>
	{
		UCSRC|=(1<<USBS);
    2aae:	a0 e4       	ldi	r26, 0x40	; 64
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e0 e4       	ldi	r30, 0x40	; 64
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 60       	ori	r24, 0x08	; 8
    2aba:	8c 93       	st	X, r24
	else
	{

	}

	if(UART_Config->bit_data==CHARACTER_SIZE_5)
    2abc:	eb 81       	ldd	r30, Y+3	; 0x03
    2abe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac0:	80 81       	ld	r24, Z
    2ac2:	85 30       	cpi	r24, 0x05	; 5
    2ac4:	b1 f4       	brne	.+44     	; 0x2af2 <UART_init+0xb8>
	{
		UCSRC&=~(1<<UCSZ0);
    2ac6:	a0 e4       	ldi	r26, 0x40	; 64
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e0 e4       	ldi	r30, 0x40	; 64
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	8d 7f       	andi	r24, 0xFD	; 253
    2ad2:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    2ad4:	a0 e4       	ldi	r26, 0x40	; 64
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e0 e4       	ldi	r30, 0x40	; 64
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	8b 7f       	andi	r24, 0xFB	; 251
    2ae0:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    2ae2:	aa e2       	ldi	r26, 0x2A	; 42
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ea e2       	ldi	r30, 0x2A	; 42
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8b 7f       	andi	r24, 0xFB	; 251
    2aee:	8c 93       	st	X, r24
    2af0:	6b c0       	rjmp	.+214    	; 0x2bc8 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_6)
    2af2:	eb 81       	ldd	r30, Y+3	; 0x03
    2af4:	fc 81       	ldd	r31, Y+4	; 0x04
    2af6:	80 81       	ld	r24, Z
    2af8:	86 30       	cpi	r24, 0x06	; 6
    2afa:	b1 f4       	brne	.+44     	; 0x2b28 <UART_init+0xee>
	{
		UCSRC|=(1<<UCSZ0);
    2afc:	a0 e4       	ldi	r26, 0x40	; 64
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	82 60       	ori	r24, 0x02	; 2
    2b08:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ1);
    2b0a:	a0 e4       	ldi	r26, 0x40	; 64
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e0 e4       	ldi	r30, 0x40	; 64
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	8b 7f       	andi	r24, 0xFB	; 251
    2b16:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    2b18:	aa e2       	ldi	r26, 0x2A	; 42
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ea e2       	ldi	r30, 0x2A	; 42
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	8b 7f       	andi	r24, 0xFB	; 251
    2b24:	8c 93       	st	X, r24
    2b26:	50 c0       	rjmp	.+160    	; 0x2bc8 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_7)
    2b28:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2c:	80 81       	ld	r24, Z
    2b2e:	87 30       	cpi	r24, 0x07	; 7
    2b30:	b1 f4       	brne	.+44     	; 0x2b5e <UART_init+0x124>
	{
		UCSRC|=(1<<UCSZ1);
    2b32:	a0 e4       	ldi	r26, 0x40	; 64
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e0 e4       	ldi	r30, 0x40	; 64
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	84 60       	ori	r24, 0x04	; 4
    2b3e:	8c 93       	st	X, r24
		UCSRC&=~(1<<UCSZ0);
    2b40:	a0 e4       	ldi	r26, 0x40	; 64
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e0 e4       	ldi	r30, 0x40	; 64
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	8d 7f       	andi	r24, 0xFD	; 253
    2b4c:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    2b4e:	aa e2       	ldi	r26, 0x2A	; 42
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	ea e2       	ldi	r30, 0x2A	; 42
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8b 7f       	andi	r24, 0xFB	; 251
    2b5a:	8c 93       	st	X, r24
    2b5c:	35 c0       	rjmp	.+106    	; 0x2bc8 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_8)
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b60:	fc 81       	ldd	r31, Y+4	; 0x04
    2b62:	80 81       	ld	r24, Z
    2b64:	88 30       	cpi	r24, 0x08	; 8
    2b66:	b1 f4       	brne	.+44     	; 0x2b94 <UART_init+0x15a>
	{
		UCSRC|=(1<<UCSZ0);
    2b68:	a0 e4       	ldi	r26, 0x40	; 64
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e0 e4       	ldi	r30, 0x40	; 64
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	82 60       	ori	r24, 0x02	; 2
    2b74:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    2b76:	a0 e4       	ldi	r26, 0x40	; 64
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e0 e4       	ldi	r30, 0x40	; 64
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	84 60       	ori	r24, 0x04	; 4
    2b82:	8c 93       	st	X, r24
		UCSRB&=~(1<<UCSZ2);
    2b84:	aa e2       	ldi	r26, 0x2A	; 42
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	ea e2       	ldi	r30, 0x2A	; 42
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8b 7f       	andi	r24, 0xFB	; 251
    2b90:	8c 93       	st	X, r24
    2b92:	1a c0       	rjmp	.+52     	; 0x2bc8 <UART_init+0x18e>
	}
	else if(UART_Config->bit_data==CHARACTER_SIZE_9)
    2b94:	eb 81       	ldd	r30, Y+3	; 0x03
    2b96:	fc 81       	ldd	r31, Y+4	; 0x04
    2b98:	80 81       	ld	r24, Z
    2b9a:	89 30       	cpi	r24, 0x09	; 9
    2b9c:	a9 f4       	brne	.+42     	; 0x2bc8 <UART_init+0x18e>
	{
		UCSRC|=(1<<UCSZ0);
    2b9e:	a0 e4       	ldi	r26, 0x40	; 64
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e0 e4       	ldi	r30, 0x40	; 64
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 60       	ori	r24, 0x02	; 2
    2baa:	8c 93       	st	X, r24
		UCSRC|=(1<<UCSZ1);
    2bac:	a0 e4       	ldi	r26, 0x40	; 64
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e0 e4       	ldi	r30, 0x40	; 64
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	8c 93       	st	X, r24
		UCSRB|=(1<<UCSZ2);
    2bba:	aa e2       	ldi	r26, 0x2A	; 42
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	ea e2       	ldi	r30, 0x2A	; 42
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	84 60       	ori	r24, 0x04	; 4
    2bc6:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    2bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bca:	fc 81       	ldd	r31, Y+4	; 0x04
    2bcc:	83 81       	ldd	r24, Z+3	; 0x03
    2bce:	94 81       	ldd	r25, Z+4	; 0x04
    2bd0:	a5 81       	ldd	r26, Z+5	; 0x05
    2bd2:	b6 81       	ldd	r27, Z+6	; 0x06
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	aa 1f       	adc	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	aa 1f       	adc	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	88 0f       	add	r24, r24
    2be6:	99 1f       	adc	r25, r25
    2be8:	aa 1f       	adc	r26, r26
    2bea:	bb 1f       	adc	r27, r27
    2bec:	9c 01       	movw	r18, r24
    2bee:	ad 01       	movw	r20, r26
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	94 e2       	ldi	r25, 0x24	; 36
    2bf4:	a4 ef       	ldi	r26, 0xF4	; 244
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__udivmodsi4>
    2c00:	da 01       	movw	r26, r20
    2c02:	c9 01       	movw	r24, r18
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c0a:	e0 e4       	ldi	r30, 0x40	; 64
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	89 2f       	mov	r24, r25
    2c14:	99 27       	eor	r25, r25
    2c16:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c18:	e9 e2       	ldi	r30, 0x29	; 41
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	80 83       	st	Z, r24

}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	0f 92       	push	r0
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c3a:	eb e2       	ldi	r30, 0x2B	; 43
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	80 72       	andi	r24, 0x20	; 32
    2c46:	90 70       	andi	r25, 0x00	; 0
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	b9 f3       	breq	.-18     	; 0x2c3a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c4c:	ec e2       	ldi	r30, 0x2C	; 44
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c64:	eb e2       	ldi	r30, 0x2B	; 43
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 23       	and	r24, r24
    2c6c:	dc f7       	brge	.-10     	; 0x2c64 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c6e:	ec e2       	ldi	r30, 0x2C	; 44
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
}
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <UART_sendString+0x6>
    2c80:	0f 92       	push	r0
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	9b 83       	std	Y+3, r25	; 0x03
    2c88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c8a:	19 82       	std	Y+1, r1	; 0x01
    2c8c:	0e c0       	rjmp	.+28     	; 0x2caa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e2 0f       	add	r30, r18
    2c9c:	f3 1f       	adc	r31, r19
    2c9e:	80 81       	ld	r24, Z
    2ca0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <UART_sendByte>
		i++;
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	80 81       	ld	r24, Z
    2cbc:	88 23       	and	r24, r24
    2cbe:	39 f7       	brne	.-50     	; 0x2c8e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <UART_receiveString+0xa>
    2cd6:	0f 92       	push	r0
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	9b 83       	std	Y+3, r25	; 0x03
    2cde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ce0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	8c 01       	movw	r16, r24
    2cee:	02 0f       	add	r16, r18
    2cf0:	13 1f       	adc	r17, r19
    2cf2:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <UART_recieveByte>
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	80 83       	st	Z, r24
    2cfa:	0f c0       	rjmp	.+30     	; 0x2d1a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	02 0f       	add	r16, r18
    2d10:	13 1f       	adc	r17, r19
    2d12:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <UART_recieveByte>
    2d16:	f8 01       	movw	r30, r16
    2d18:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	80 81       	ld	r24, Z
    2d2c:	83 32       	cpi	r24, 0x23	; 35
    2d2e:	31 f7       	brne	.-52     	; 0x2cfc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e2 0f       	add	r30, r18
    2d3e:	f3 1f       	adc	r31, r19
    2d40:	10 82       	st	Z, r1
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <__udivmodhi4>:
    2d52:	aa 1b       	sub	r26, r26
    2d54:	bb 1b       	sub	r27, r27
    2d56:	51 e1       	ldi	r21, 0x11	; 17
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <__udivmodhi4_ep>

00002d5a <__udivmodhi4_loop>:
    2d5a:	aa 1f       	adc	r26, r26
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	a6 17       	cp	r26, r22
    2d60:	b7 07       	cpc	r27, r23
    2d62:	10 f0       	brcs	.+4      	; 0x2d68 <__udivmodhi4_ep>
    2d64:	a6 1b       	sub	r26, r22
    2d66:	b7 0b       	sbc	r27, r23

00002d68 <__udivmodhi4_ep>:
    2d68:	88 1f       	adc	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	5a 95       	dec	r21
    2d6e:	a9 f7       	brne	.-22     	; 0x2d5a <__udivmodhi4_loop>
    2d70:	80 95       	com	r24
    2d72:	90 95       	com	r25
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	08 95       	ret

00002d7a <__udivmodsi4>:
    2d7a:	a1 e2       	ldi	r26, 0x21	; 33
    2d7c:	1a 2e       	mov	r1, r26
    2d7e:	aa 1b       	sub	r26, r26
    2d80:	bb 1b       	sub	r27, r27
    2d82:	fd 01       	movw	r30, r26
    2d84:	0d c0       	rjmp	.+26     	; 0x2da0 <__udivmodsi4_ep>

00002d86 <__udivmodsi4_loop>:
    2d86:	aa 1f       	adc	r26, r26
    2d88:	bb 1f       	adc	r27, r27
    2d8a:	ee 1f       	adc	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	a2 17       	cp	r26, r18
    2d90:	b3 07       	cpc	r27, r19
    2d92:	e4 07       	cpc	r30, r20
    2d94:	f5 07       	cpc	r31, r21
    2d96:	20 f0       	brcs	.+8      	; 0x2da0 <__udivmodsi4_ep>
    2d98:	a2 1b       	sub	r26, r18
    2d9a:	b3 0b       	sbc	r27, r19
    2d9c:	e4 0b       	sbc	r30, r20
    2d9e:	f5 0b       	sbc	r31, r21

00002da0 <__udivmodsi4_ep>:
    2da0:	66 1f       	adc	r22, r22
    2da2:	77 1f       	adc	r23, r23
    2da4:	88 1f       	adc	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	1a 94       	dec	r1
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <__udivmodsi4_loop>
    2dac:	60 95       	com	r22
    2dae:	70 95       	com	r23
    2db0:	80 95       	com	r24
    2db2:	90 95       	com	r25
    2db4:	9b 01       	movw	r18, r22
    2db6:	ac 01       	movw	r20, r24
    2db8:	bd 01       	movw	r22, r26
    2dba:	cf 01       	movw	r24, r30
    2dbc:	08 95       	ret

00002dbe <__prologue_saves__>:
    2dbe:	2f 92       	push	r2
    2dc0:	3f 92       	push	r3
    2dc2:	4f 92       	push	r4
    2dc4:	5f 92       	push	r5
    2dc6:	6f 92       	push	r6
    2dc8:	7f 92       	push	r7
    2dca:	8f 92       	push	r8
    2dcc:	9f 92       	push	r9
    2dce:	af 92       	push	r10
    2dd0:	bf 92       	push	r11
    2dd2:	cf 92       	push	r12
    2dd4:	df 92       	push	r13
    2dd6:	ef 92       	push	r14
    2dd8:	ff 92       	push	r15
    2dda:	0f 93       	push	r16
    2ddc:	1f 93       	push	r17
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	ca 1b       	sub	r28, r26
    2de8:	db 0b       	sbc	r29, r27
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	09 94       	ijmp

00002df6 <__epilogue_restores__>:
    2df6:	2a 88       	ldd	r2, Y+18	; 0x12
    2df8:	39 88       	ldd	r3, Y+17	; 0x11
    2dfa:	48 88       	ldd	r4, Y+16	; 0x10
    2dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e00:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e02:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e04:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e06:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e08:	b9 84       	ldd	r11, Y+9	; 0x09
    2e0a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e0c:	df 80       	ldd	r13, Y+7	; 0x07
    2e0e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e10:	fd 80       	ldd	r15, Y+5	; 0x05
    2e12:	0c 81       	ldd	r16, Y+4	; 0x04
    2e14:	1b 81       	ldd	r17, Y+3	; 0x03
    2e16:	aa 81       	ldd	r26, Y+2	; 0x02
    2e18:	b9 81       	ldd	r27, Y+1	; 0x01
    2e1a:	ce 0f       	add	r28, r30
    2e1c:	d1 1d       	adc	r29, r1
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	ed 01       	movw	r28, r26
    2e2a:	08 95       	ret

00002e2c <itoa>:
    2e2c:	fb 01       	movw	r30, r22
    2e2e:	9f 01       	movw	r18, r30
    2e30:	e8 94       	clt
    2e32:	42 30       	cpi	r20, 0x02	; 2
    2e34:	c4 f0       	brlt	.+48     	; 0x2e66 <itoa+0x3a>
    2e36:	45 32       	cpi	r20, 0x25	; 37
    2e38:	b4 f4       	brge	.+44     	; 0x2e66 <itoa+0x3a>
    2e3a:	4a 30       	cpi	r20, 0x0A	; 10
    2e3c:	29 f4       	brne	.+10     	; 0x2e48 <itoa+0x1c>
    2e3e:	97 fb       	bst	r25, 7
    2e40:	1e f4       	brtc	.+6      	; 0x2e48 <itoa+0x1c>
    2e42:	90 95       	com	r25
    2e44:	81 95       	neg	r24
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	64 2f       	mov	r22, r20
    2e4a:	77 27       	eor	r23, r23
    2e4c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__udivmodhi4>
    2e50:	80 5d       	subi	r24, 0xD0	; 208
    2e52:	8a 33       	cpi	r24, 0x3A	; 58
    2e54:	0c f0       	brlt	.+2      	; 0x2e58 <itoa+0x2c>
    2e56:	89 5d       	subi	r24, 0xD9	; 217
    2e58:	81 93       	st	Z+, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	a1 f7       	brne	.-24     	; 0x2e48 <itoa+0x1c>
    2e60:	16 f4       	brtc	.+4      	; 0x2e66 <itoa+0x3a>
    2e62:	5d e2       	ldi	r21, 0x2D	; 45
    2e64:	51 93       	st	Z+, r21
    2e66:	10 82       	st	Z, r1
    2e68:	c9 01       	movw	r24, r18
    2e6a:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <strrev>

00002e6e <strrev>:
    2e6e:	dc 01       	movw	r26, r24
    2e70:	fc 01       	movw	r30, r24
    2e72:	67 2f       	mov	r22, r23
    2e74:	71 91       	ld	r23, Z+
    2e76:	77 23       	and	r23, r23
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <strrev+0x4>
    2e7a:	32 97       	sbiw	r30, 0x02	; 2
    2e7c:	04 c0       	rjmp	.+8      	; 0x2e86 <strrev+0x18>
    2e7e:	7c 91       	ld	r23, X
    2e80:	6d 93       	st	X+, r22
    2e82:	70 83       	st	Z, r23
    2e84:	62 91       	ld	r22, -Z
    2e86:	ae 17       	cp	r26, r30
    2e88:	bf 07       	cpc	r27, r31
    2e8a:	c8 f3       	brcs	.-14     	; 0x2e7e <strrev+0x10>
    2e8c:	08 95       	ret

00002e8e <_exit>:
    2e8e:	f8 94       	cli

00002e90 <__stop_program>:
    2e90:	ff cf       	rjmp	.-2      	; 0x2e90 <__stop_program>
